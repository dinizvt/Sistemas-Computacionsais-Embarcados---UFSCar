
C:/intelFPGA_lite/18.1/University_Program/Programs/P2EMBARCADOs/video.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 98 16 00 00 9c 16 00 00 a0 16 00 00     @...............
      30:	a4 16 00 00 94 16 00 00 a8 16 00 00 ac 16 00 00     ................

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x40>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x3c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x44>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0xc>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0xc>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x2c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x1c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000555 	bl	1630 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000034d4 	.word	0x000034d4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00003918 	.word	0x00003918

00000124 <__cs3_heap_start_ptr>:
     124:	000039b8 	.word	0x000039b8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00003920 	.word	0x00003920
     170:	00003923 	.word	0x00003923
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00003920 	.word	0x00003920
     1bc:	00003920 	.word	0x00003920
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00003920 	.word	0x00003920
     200:	00000000 	.word	0x00000000
     204:	00001738 	.word	0x00001738

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001738 	.word	0x00001738
     250:	00003924 	.word	0x00003924
     254:	000034d8 	.word	0x000034d8
     258:	00000000 	.word	0x00000000

0000025c <check_collision>:
    char score_display[20] = "Score: ";
    int_to_string(score, score_display, 7);
    video_text(1, 1, score_display);
}

int check_collision(int dino_x, int dino_y, int obs_x, int obs_y, int obs_type) {
     25c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
     260:	e59dc004 	ldr	r12, [sp, #4]
    int obs_width, obs_height;
    
    if (obs_type == OBSTACLE_TYPE_CACTUS) {
     264:	e35c0000 	cmp	r12, #0
     268:	0a000004 	beq	280 <check_collision+0x24>
        obs_width = CACTUS_SPRITE_WIDTH;
        obs_height = CACTUS_SPRITE_HEIGHT;
    } else if (obs_type == OBSTACLE_TYPE_BIRD) {
     26c:	e35c0001 	cmp	r12, #1
        obs_width = BIRD_FRAME_WIDTH;
        obs_height = BIRD_FRAME_HEIGHT;
     270:	03a0400e 	moveq	r4, #14
    
    if (obs_type == OBSTACLE_TYPE_CACTUS) {
        obs_width = CACTUS_SPRITE_WIDTH;
        obs_height = CACTUS_SPRITE_HEIGHT;
    } else if (obs_type == OBSTACLE_TYPE_BIRD) {
        obs_width = BIRD_FRAME_WIDTH;
     274:	03a0c015 	moveq	r12, #21
    int obs_width, obs_height;
    
    if (obs_type == OBSTACLE_TYPE_CACTUS) {
        obs_width = CACTUS_SPRITE_WIDTH;
        obs_height = CACTUS_SPRITE_HEIGHT;
    } else if (obs_type == OBSTACLE_TYPE_BIRD) {
     278:	0a000002 	beq	288 <check_collision+0x2c>
     27c:	ea000013 	b	2d0 <check_collision+0x74>
int check_collision(int dino_x, int dino_y, int obs_x, int obs_y, int obs_type) {
    int obs_width, obs_height;
    
    if (obs_type == OBSTACLE_TYPE_CACTUS) {
        obs_width = CACTUS_SPRITE_WIDTH;
        obs_height = CACTUS_SPRITE_HEIGHT;
     280:	e3a0401c 	mov	r4, #28

int check_collision(int dino_x, int dino_y, int obs_x, int obs_y, int obs_type) {
    int obs_width, obs_height;
    
    if (obs_type == OBSTACLE_TYPE_CACTUS) {
        obs_width = CACTUS_SPRITE_WIDTH;
     284:	e3a0c012 	mov	r12, #18
        obs_height = BIRD_FRAME_HEIGHT;
    } else {
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
     288:	e082c00c 	add	r12, r2, r12
     28c:	e28cc003 	add	r12, r12, #3
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
            dino_y < obs_y + obs_height &&
     290:	e15c0000 	cmp	r12, r0
     294:	d3a00000 	movle	r0, #0
     298:	da00000e 	ble	2d8 <check_collision+0x7c>
    } else {
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
     29c:	e2800014 	add	r0, r0, #20
        obs_height = BIRD_FRAME_HEIGHT;
    } else {
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
     2a0:	e1520000 	cmp	r2, r0
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
            dino_y < obs_y + obs_height &&
     2a4:	a3a00000 	movge	r0, #0
        obs_height = BIRD_FRAME_HEIGHT;
    } else {
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
     2a8:	aa00000a 	bge	2d8 <check_collision+0x7c>
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
            dino_y < obs_y + obs_height &&
     2ac:	e0834004 	add	r4, r3, r4
    } else {
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
     2b0:	e1540001 	cmp	r4, r1
            dino_y < obs_y + obs_height &&
     2b4:	d3a00000 	movle	r0, #0
    } else {
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
     2b8:	da000006 	ble	2d8 <check_collision+0x7c>
            dino_y < obs_y + obs_height &&
            dino_y + DINO_SPRITE_HEIGHT > obs_y);
     2bc:	e281001a 	add	r0, r1, #26
        return 0;  // Unknown obstacle type
    }
    
    return (dino_x < obs_x + obs_width + 3 &&
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
            dino_y < obs_y + obs_height &&
     2c0:	e1530000 	cmp	r3, r0
     2c4:	a3a00000 	movge	r0, #0
     2c8:	b3a00001 	movlt	r0, #1
     2cc:	ea000001 	b	2d8 <check_collision+0x7c>
        obs_height = CACTUS_SPRITE_HEIGHT;
    } else if (obs_type == OBSTACLE_TYPE_BIRD) {
        obs_width = BIRD_FRAME_WIDTH;
        obs_height = BIRD_FRAME_HEIGHT;
    } else {
        return 0;  // Unknown obstacle type
     2d0:	e3a00000 	mov	r0, #0
     2d4:	eaffffff 	b	2d8 <check_collision+0x7c>
    
    return (dino_x < obs_x + obs_width + 3 &&
            dino_x + DINO_SPRITE_WIDTH > obs_x &&
            dino_y < obs_y + obs_height &&
            dino_y + DINO_SPRITE_HEIGHT > obs_y);
}
     2d8:	e8bd0010 	ldmfd	sp!, {r4}
     2dc:	e12fff1e 	bx	lr

000002e0 <reset_game_state>:
    col_offset = (db == 8) ? 1 : 0;
    srand(42);
}

void reset_game_state(void) {
    dino.x = DINO_START_X;
     2e0:	e303393c 	movw	r3, #14652	; 0x393c
     2e4:	e3403000 	movt	r3, #0
     2e8:	e3a0201e 	mov	r2, #30
     2ec:	e5832000 	str	r2, [r3]
    dino.y = GROUND_Y - DINO_SPRITE_HEIGHT;
     2f0:	e3a020ae 	mov	r2, #174	; 0xae
     2f4:	e5832004 	str	r2, [r3, #4]
    dino.jump_state = JUMP_NONE;
     2f8:	e3a02000 	mov	r2, #0
     2fc:	e5832008 	str	r2, [r3, #8]
    dino.jump_counter = 0;
     300:	e583200c 	str	r2, [r3, #12]

    // Initialize obstacles: only the first is active at start
    int i;
    for (i = 0; i < MAX_OBSTACLES; i++) {
        obstacles[i].active = 0;
     304:	e583202c 	str	r2, [r3, #44]	; 0x2c
     308:	e583203c 	str	r2, [r3, #60]	; 0x3c
    }
    obstacles[0].x = STANDARD_X;
     30c:	e3a01d05 	mov	r1, #320	; 0x140
     310:	e5831010 	str	r1, [r3, #16]
    // Only cactus at the start
    obstacles[0].type = OBSTACLE_TYPE_CACTUS;
     314:	e5832018 	str	r2, [r3, #24]
    obstacles[0].y = GROUND_Y - CACTUS_SPRITE_HEIGHT;
     318:	e3a010ac 	mov	r1, #172	; 0xac
     31c:	e5831014 	str	r1, [r3, #20]
    obstacles[0].active = 1;
     320:	e3a00001 	mov	r0, #1
     324:	e583001c 	str	r0, [r3, #28]

    game.score = 0;
     328:	e5832040 	str	r2, [r3, #64]	; 0x40
    game.game_over = 0;
     32c:	e5832044 	str	r2, [r3, #68]	; 0x44
    game.frame_counter = 0;
     330:	e5832048 	str	r2, [r3, #72]	; 0x48
    game.current_speed = GAME_SPEED;
     334:	e30816a0 	movw	r1, #34464	; 0x86a0
     338:	e7df1810 	bfi	r1, r0, #16, #16
     33c:	e583104c 	str	r1, [r3, #76]	; 0x4c
    obstacle_spawn_timer = 0;
     340:	e5832050 	str	r2, [r3, #80]	; 0x50
     344:	e12fff1e 	bx	lr

00000348 <handle_jump_logic>:
}

void handle_jump_logic(volatile int *key_ptr) {
    static int jump_hold_counter = 0;
    if ((*key_ptr & 0x1) != 0 && dino.jump_state == JUMP_NONE) {
     348:	e5903000 	ldr	r3, [r0]
     34c:	e3130001 	tst	r3, #1
     350:	0a00000b 	beq	384 <handle_jump_logic+0x3c>
     354:	e303393c 	movw	r3, #14652	; 0x393c
     358:	e3403000 	movt	r3, #0
     35c:	e5933008 	ldr	r3, [r3, #8]
     360:	e3530000 	cmp	r3, #0
     364:	1a000006 	bne	384 <handle_jump_logic+0x3c>
        dino.jump_state = JUMP_UP;
     368:	e303393c 	movw	r3, #14652	; 0x393c
     36c:	e3403000 	movt	r3, #0
     370:	e3a02001 	mov	r2, #1
     374:	e5832008 	str	r2, [r3, #8]
        dino.jump_counter = 0;
     378:	e3a02000 	mov	r2, #0
     37c:	e583200c 	str	r2, [r3, #12]
        jump_hold_counter = 0;
     380:	e5832054 	str	r2, [r3, #84]	; 0x54
    }

    if (dino.jump_state == JUMP_UP) {
     384:	e303393c 	movw	r3, #14652	; 0x393c
     388:	e3403000 	movt	r3, #0
     38c:	e5933008 	ldr	r3, [r3, #8]
     390:	e3530001 	cmp	r3, #1
     394:	1a000016 	bne	3f4 <handle_jump_logic+0xac>
        dino.jump_counter++;
     398:	e303393c 	movw	r3, #14652	; 0x393c
     39c:	e3403000 	movt	r3, #0
     3a0:	e593200c 	ldr	r2, [r3, #12]
     3a4:	e2822001 	add	r2, r2, #1
     3a8:	e583200c 	str	r2, [r3, #12]
        dino.y = (GROUND_Y - DINO_SPRITE_HEIGHT) - (JUMP_HEIGHT * dino.jump_counter / JUMP_FRAMES);
     3ac:	e3a01032 	mov	r1, #50	; 0x32
     3b0:	e0010291 	mul	r1, r1, r2
     3b4:	e3060667 	movw	r0, #26215	; 0x6667
     3b8:	e3460666 	movt	r0, #26214	; 0x6666
     3bc:	e0c0c190 	smull	r12, r0, r0, r1
     3c0:	e1a01fc1 	asr	r1, r1, #31
     3c4:	e0611140 	rsb	r1, r1, r0, asr #2
     3c8:	e26110ae 	rsb	r1, r1, #174	; 0xae
     3cc:	e5831004 	str	r1, [r3, #4]
        if (dino.jump_counter >= JUMP_FRAMES) {
     3d0:	e3520009 	cmp	r2, #9
     3d4:	d12fff1e 	bxle	lr
            dino.jump_state = JUMP_HOLD;
     3d8:	e303393c 	movw	r3, #14652	; 0x393c
     3dc:	e3403000 	movt	r3, #0
     3e0:	e3a02002 	mov	r2, #2
     3e4:	e5832008 	str	r2, [r3, #8]
            jump_hold_counter = 0;
     3e8:	e3a02000 	mov	r2, #0
     3ec:	e5832054 	str	r2, [r3, #84]	; 0x54
     3f0:	e12fff1e 	bx	lr
        }
    } else if (dino.jump_state == JUMP_HOLD) {
     3f4:	e3530002 	cmp	r3, #2
     3f8:	1a00000c 	bne	430 <handle_jump_logic+0xe8>
        // Hold at the top for a few frames
        dino.y = (GROUND_Y - DINO_SPRITE_HEIGHT) - JUMP_HEIGHT;
     3fc:	e303393c 	movw	r3, #14652	; 0x393c
     400:	e3403000 	movt	r3, #0
     404:	e3a0207c 	mov	r2, #124	; 0x7c
     408:	e5832004 	str	r2, [r3, #4]
        jump_hold_counter++;
     40c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
     410:	e2822001 	add	r2, r2, #1
     414:	e5832054 	str	r2, [r3, #84]	; 0x54
        if (jump_hold_counter >= JUMP_HOLD_FRAMES) {
     418:	e3520004 	cmp	r2, #4
            dino.jump_state = JUMP_DOWN;
     41c:	c303393c 	movwgt	r3, #14652	; 0x393c
     420:	c3403000 	movtgt	r3, #0
     424:	c3a02003 	movgt	r2, #3
     428:	c5832008 	strgt	r2, [r3, #8]
     42c:	e12fff1e 	bx	lr
        }
    } else if (dino.jump_state == JUMP_DOWN) {
     430:	e3530003 	cmp	r3, #3
     434:	112fff1e 	bxne	lr
        dino.jump_counter--;
     438:	e303393c 	movw	r3, #14652	; 0x393c
     43c:	e3403000 	movt	r3, #0
     440:	e593200c 	ldr	r2, [r3, #12]
     444:	e2422001 	sub	r2, r2, #1
     448:	e583200c 	str	r2, [r3, #12]
        dino.y = (GROUND_Y - DINO_SPRITE_HEIGHT) - (JUMP_HEIGHT * dino.jump_counter / JUMP_FRAMES);
     44c:	e3a01032 	mov	r1, #50	; 0x32
     450:	e0010291 	mul	r1, r1, r2
     454:	e3060667 	movw	r0, #26215	; 0x6667
     458:	e3460666 	movt	r0, #26214	; 0x6666
     45c:	e0c0c190 	smull	r12, r0, r0, r1
     460:	e1a01fc1 	asr	r1, r1, #31
     464:	e0611140 	rsb	r1, r1, r0, asr #2
     468:	e26110ae 	rsb	r1, r1, #174	; 0xae
     46c:	e5831004 	str	r1, [r3, #4]
        if (dino.jump_counter <= 0) {
     470:	e3520000 	cmp	r2, #0
     474:	c12fff1e 	bxgt	lr
            dino.jump_state = JUMP_NONE;
     478:	e303393c 	movw	r3, #14652	; 0x393c
     47c:	e3403000 	movt	r3, #0
     480:	e3a02000 	mov	r2, #0
     484:	e5832008 	str	r2, [r3, #8]
            dino.y = GROUND_Y - DINO_SPRITE_HEIGHT;
     488:	e3a020ae 	mov	r2, #174	; 0xae
     48c:	e5832004 	str	r2, [r3, #4]
     490:	e12fff1e 	bx	lr

00000494 <int_to_string>:
    int_to_string(final_score, score_text, 7);
    video_text(10, 12, score_text);
    video_text(8, 14, "Press KEY1 to restart");
}

void int_to_string(int num, char *str, int start_pos) {
     494:	e92d0030 	push	{r4, r5}
    if (num == 0) {
     498:	e3500000 	cmp	r0, #0
     49c:	0a000002 	beq	4ac <int_to_string+0x18>
        str[start_pos + 1] = '\0';
        return;
    }
    
    int i = start_pos;
    while (num > 0) {
     4a0:	d1a03002 	movle	r3, r2
     4a4:	da000013 	ble	4f8 <int_to_string+0x64>
     4a8:	ea000004 	b	4c0 <int_to_string+0x2c>
    video_text(8, 14, "Press KEY1 to restart");
}

void int_to_string(int num, char *str, int start_pos) {
    if (num == 0) {
        str[start_pos] = '0';
     4ac:	e3a03030 	mov	r3, #48	; 0x30
     4b0:	e7e13002 	strb	r3, [r1, r2]!
        str[start_pos + 1] = '\0';
     4b4:	e3a03000 	mov	r3, #0
     4b8:	e5c13001 	strb	r3, [r1, #1]
        return;
     4bc:	ea00001a 	b	52c <int_to_string+0x98>
    }
    
    int i = start_pos;
    while (num > 0) {
     4c0:	e1a03002 	mov	r3, r2
        str[i] = (num % 10) + '0';
     4c4:	e3065667 	movw	r5, #26215	; 0x6667
     4c8:	e3465666 	movt	r5, #26214	; 0x6666
     4cc:	e0c4c095 	smull	r12, r4, r5, r0
     4d0:	e1a0cfc0 	asr	r12, r0, #31
     4d4:	e06cc144 	rsb	r12, r12, r4, asr #2
     4d8:	e08c410c 	add	r4, r12, r12, lsl #2
     4dc:	e0400084 	sub	r0, r0, r4, lsl #1
     4e0:	e2800030 	add	r0, r0, #48	; 0x30
     4e4:	e7c10003 	strb	r0, [r1, r3]
        num /= 10;
     4e8:	e1a0000c 	mov	r0, r12
        i++;
     4ec:	e2833001 	add	r3, r3, #1
        str[start_pos + 1] = '\0';
        return;
    }
    
    int i = start_pos;
    while (num > 0) {
     4f0:	e35c0000 	cmp	r12, #0
     4f4:	cafffff4 	bgt	4cc <int_to_string+0x38>
        str[i] = (num % 10) + '0';
        num /= 10;
        i++;
    }
    str[i] = '\0';
     4f8:	e3a00000 	mov	r0, #0
     4fc:	e7c10003 	strb	r0, [r1, r3]
    
    // Reverse the number part
    int start = start_pos, end = i - 1;
     500:	e2433001 	sub	r3, r3, #1
    while (start < end) {
     504:	e1520003 	cmp	r2, r3
     508:	aa000007 	bge	52c <int_to_string+0x98>
        char temp = str[start];
     50c:	e7d10002 	ldrb	r0, [r1, r2]
        str[start] = str[end];
     510:	e7d1c003 	ldrb	r12, [r1, r3]
     514:	e7c1c002 	strb	r12, [r1, r2]
        str[end] = temp;
     518:	e7c10003 	strb	r0, [r1, r3]
        start++;
     51c:	e2822001 	add	r2, r2, #1
        end--;
     520:	e2433001 	sub	r3, r3, #1
    }
    str[i] = '\0';
    
    // Reverse the number part
    int start = start_pos, end = i - 1;
    while (start < end) {
     524:	e1520003 	cmp	r2, r3
     528:	bafffff7 	blt	50c <int_to_string+0x78>
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}
     52c:	e8bd0030 	pop	{r4, r5}
     530:	e12fff1e 	bx	lr

00000534 <delay>:

void delay(int count) {
    int i;
    for (i = 0; i < count; i++);
     534:	e3500000 	cmp	r0, #0
     538:	d12fff1e 	bxle	lr
     53c:	e3a03000 	mov	r3, #0
     540:	e2833001 	add	r3, r3, #1
     544:	e1530000 	cmp	r3, r0
     548:	1afffffc 	bne	540 <delay+0xc>
     54c:	e12fff1e 	bx	lr

00000550 <random_range>:
}

int random_range(int min, int max) {
     550:	e92d4038 	push	{r3, r4, r5, lr}
     554:	e1a04000 	mov	r4, r0
     558:	e1a05001 	mov	r5, r1
    return min + (rand() % (max - min + 1));
     55c:	eb000366 	bl	12fc <rand>
     560:	e0641005 	rsb	r1, r4, r5
     564:	e2811001 	add	r1, r1, #1
     568:	eb00033e 	bl	1268 <__aeabi_idivmod>
}
     56c:	e0810004 	add	r0, r1, r4
     570:	e8bd8038 	pop	{r3, r4, r5, pc}

00000574 <handle_obstacle_movement>:
            dino.y = GROUND_Y - DINO_SPRITE_HEIGHT;
        }
    }
}

void handle_obstacle_movement(void) {
     574:	e92d4038 	push	{r3, r4, r5, lr}
     578:	e303293c 	movw	r2, #14652	; 0x393c
     57c:	e3402000 	movt	r2, #0
     580:	e2823010 	add	r3, r2, #16
     584:	e2820040 	add	r0, r2, #64	; 0x40
    for (i = 0; i < MAX_OBSTACLES; i++) {
        if (!obstacles[i].active) continue;
        obstacles[i].x -= OBSTACLE_STEP;
        int obstacle_width = (obstacles[i].type == OBSTACLE_TYPE_CACTUS) ? CACTUS_SPRITE_WIDTH : BIRD_FRAME_WIDTH;
        if (obstacles[i].x < -obstacle_width) {
            obstacles[i].active = 0; // Mark as inactive, ready for respawn
     588:	e3a04000 	mov	r4, #0
    int i;
    int obstacle_rand;

    // Move all active obstacles
    for (i = 0; i < MAX_OBSTACLES; i++) {
        if (!obstacles[i].active) continue;
     58c:	e593200c 	ldr	r2, [r3, #12]
     590:	e3520000 	cmp	r2, #0
     594:	0a000009 	beq	5c0 <handle_obstacle_movement+0x4c>
        obstacles[i].x -= OBSTACLE_STEP;
     598:	e5931000 	ldr	r1, [r3]
     59c:	e2411004 	sub	r1, r1, #4
     5a0:	e5831000 	str	r1, [r3]
        int obstacle_width = (obstacles[i].type == OBSTACLE_TYPE_CACTUS) ? CACTUS_SPRITE_WIDTH : BIRD_FRAME_WIDTH;
     5a4:	e5932008 	ldr	r2, [r3, #8]
     5a8:	e3520000 	cmp	r2, #0
     5ac:	13a02015 	movne	r2, #21
     5b0:	03a02012 	moveq	r2, #18
        if (obstacles[i].x < -obstacle_width) {
     5b4:	e2622000 	rsb	r2, r2, #0
     5b8:	e1510002 	cmp	r1, r2
            obstacles[i].active = 0; // Mark as inactive, ready for respawn
     5bc:	b583400c 	strlt	r4, [r3, #12]
     5c0:	e2833010 	add	r3, r3, #16
void handle_obstacle_movement(void) {
    int i;
    int obstacle_rand;

    // Move all active obstacles
    for (i = 0; i < MAX_OBSTACLES; i++) {
     5c4:	e1530000 	cmp	r3, r0
     5c8:	1affffef 	bne	58c <handle_obstacle_movement+0x18>
            obstacles[i].active = 0; // Mark as inactive, ready for respawn
        }
    }

    // Handle obstacle spawn timing
    if (obstacle_spawn_timer > 0) {
     5cc:	e303393c 	movw	r3, #14652	; 0x393c
     5d0:	e3403000 	movt	r3, #0
     5d4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     5d8:	e3530000 	cmp	r3, #0
     5dc:	ca000005 	bgt	5f8 <handle_obstacle_movement+0x84>
        obstacle_spawn_timer--;
    } else {
        for (i = 0; i < MAX_OBSTACLES; i++) {
            if (!obstacles[i].active) {
     5e0:	e303393c 	movw	r3, #14652	; 0x393c
     5e4:	e3403000 	movt	r3, #0
     5e8:	e593301c 	ldr	r3, [r3, #28]
     5ec:	e3530000 	cmp	r3, #0
     5f0:	1a000005 	bne	60c <handle_obstacle_movement+0x98>
     5f4:	ea000012 	b	644 <handle_obstacle_movement+0xd0>
        }
    }

    // Handle obstacle spawn timing
    if (obstacle_spawn_timer > 0) {
        obstacle_spawn_timer--;
     5f8:	e303293c 	movw	r2, #14652	; 0x393c
     5fc:	e3402000 	movt	r2, #0
     600:	e2433001 	sub	r3, r3, #1
     604:	e5823050 	str	r3, [r2, #80]	; 0x50
     608:	e8bd8038 	pop	{r3, r4, r5, pc}
    } else {
        for (i = 0; i < MAX_OBSTACLES; i++) {
            if (!obstacles[i].active) {
     60c:	e303393c 	movw	r3, #14652	; 0x393c
     610:	e3403000 	movt	r3, #0
     614:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
     618:	e3530000 	cmp	r3, #0
     61c:	0a000006 	beq	63c <handle_obstacle_movement+0xc8>
     620:	e303393c 	movw	r3, #14652	; 0x393c
     624:	e3403000 	movt	r3, #0
     628:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
     62c:	e3530000 	cmp	r3, #0
     630:	03a05002 	moveq	r5, #2
     634:	18bd8038 	popne	{r3, r4, r5, pc}
     638:	ea000002 	b	648 <handle_obstacle_movement+0xd4>

    // Handle obstacle spawn timing
    if (obstacle_spawn_timer > 0) {
        obstacle_spawn_timer--;
    } else {
        for (i = 0; i < MAX_OBSTACLES; i++) {
     63c:	e3a05001 	mov	r5, #1
     640:	ea000000 	b	648 <handle_obstacle_movement+0xd4>
            if (!obstacles[i].active) {
     644:	e3a05000 	mov	r5, #0
                obstacles[i].x = STANDARD_X;
     648:	e303393c 	movw	r3, #14652	; 0x393c
     64c:	e3403000 	movt	r3, #0
     650:	e0832205 	add	r2, r3, r5, lsl #4
     654:	e3a01d05 	mov	r1, #320	; 0x140
     658:	e5821010 	str	r1, [r2, #16]
                // Only spawn birds if score >= 50
                if (game.score >= 50) {
     65c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
     660:	e3530031 	cmp	r3, #49	; 0x31
     664:	da00000b 	ble	698 <handle_obstacle_movement+0x124>
                    obstacle_rand = random_range(0, 2);
     668:	e3a00000 	mov	r0, #0
     66c:	e3a01002 	mov	r1, #2
     670:	ebffffb6 	bl	550 <random_range>
                    obstacles[i].type = obstacle_rand == 0 ? OBSTACLE_TYPE_BIRD : OBSTACLE_TYPE_CACTUS;
     674:	e2700001 	rsbs	r0, r0, #1
     678:	33a00000 	movcc	r0, #0
     67c:	e303393c 	movw	r3, #14652	; 0x393c
     680:	e3403000 	movt	r3, #0
     684:	e0833205 	add	r3, r3, r5, lsl #4
     688:	e5830018 	str	r0, [r3, #24]
                } else {
                    obstacles[i].type = OBSTACLE_TYPE_CACTUS;
                }
                if (obstacles[i].type == OBSTACLE_TYPE_CACTUS) {
     68c:	e3500000 	cmp	r0, #0
     690:	1a00000b 	bne	6c4 <handle_obstacle_movement+0x150>
     694:	ea000004 	b	6ac <handle_obstacle_movement+0x138>
                // Only spawn birds if score >= 50
                if (game.score >= 50) {
                    obstacle_rand = random_range(0, 2);
                    obstacles[i].type = obstacle_rand == 0 ? OBSTACLE_TYPE_BIRD : OBSTACLE_TYPE_CACTUS;
                } else {
                    obstacles[i].type = OBSTACLE_TYPE_CACTUS;
     698:	e303393c 	movw	r3, #14652	; 0x393c
     69c:	e3403000 	movt	r3, #0
     6a0:	e0833205 	add	r3, r3, r5, lsl #4
     6a4:	e3a02000 	mov	r2, #0
     6a8:	e5832018 	str	r2, [r3, #24]
                }
                if (obstacles[i].type == OBSTACLE_TYPE_CACTUS) {
                    obstacles[i].y = GROUND_Y - CACTUS_SPRITE_HEIGHT;
     6ac:	e303393c 	movw	r3, #14652	; 0x393c
     6b0:	e3403000 	movt	r3, #0
     6b4:	e0833205 	add	r3, r3, r5, lsl #4
     6b8:	e3a020ac 	mov	r2, #172	; 0xac
     6bc:	e5832014 	str	r2, [r3, #20]
     6c0:	ea000005 	b	6dc <handle_obstacle_movement+0x168>
                } else if (obstacles[i].type == OBSTACLE_TYPE_BIRD) {
     6c4:	e3500001 	cmp	r0, #1
                    obstacles[i].y = GROUND_Y - DINO_SPRITE_HEIGHT - BIRD_FRAME_HEIGHT - 10;
     6c8:	0303393c 	movweq	r3, #14652	; 0x393c
     6cc:	03403000 	movteq	r3, #0
     6d0:	00833205 	addeq	r3, r3, r5, lsl #4
     6d4:	03a02096 	moveq	r2, #150	; 0x96
     6d8:	05832014 	streq	r2, [r3, #20]
                }
                obstacles[i].active = 1;
     6dc:	e303493c 	movw	r4, #14652	; 0x393c
     6e0:	e3404000 	movt	r4, #0
     6e4:	e0845205 	add	r5, r4, r5, lsl #4
     6e8:	e3a03001 	mov	r3, #1
     6ec:	e585301c 	str	r3, [r5, #28]
                obstacle_spawn_timer = random_range(MIN_OBSTACLE_SPAWN_FRAMES, MAX_OBSTACLES_SPAWN_FRAMES);
     6f0:	e3a0001e 	mov	r0, #30
     6f4:	e3a0103c 	mov	r1, #60	; 0x3c
     6f8:	ebffff94 	bl	550 <random_range>
     6fc:	e5840050 	str	r0, [r4, #80]	; 0x50
     700:	e8bd8038 	pop	{r3, r4, r5, pc}

00000704 <video_text>:
    return min + (rand() % (max - min + 1));
}

void video_text(int x, int y, char *text_ptr) {
    volatile char *character_buffer = (char *)FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
     704:	e0801381 	add	r1, r0, r1, lsl #7
    
    while (*text_ptr) {
     708:	e5d23000 	ldrb	r3, [r2]
     70c:	e3530000 	cmp	r3, #0
     710:	012fff1e 	bxeq	lr
     714:	e1a0c002 	mov	r12, r2

int random_range(int min, int max) {
    return min + (rand() % (max - min + 1));
}

void video_text(int x, int y, char *text_ptr) {
     718:	e0622001 	rsb	r2, r2, r1
     71c:	e28224c9 	add	r2, r2, #-922746880	; 0xc9000000
    volatile char *character_buffer = (char *)FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    
    while (*text_ptr) {
        *(character_buffer + offset) = *text_ptr;
     720:	e7c2300c 	strb	r3, [r2, r12]

void video_text(int x, int y, char *text_ptr) {
    volatile char *character_buffer = (char *)FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    
    while (*text_ptr) {
     724:	e5fc3001 	ldrb	r3, [r12, #1]!
     728:	e3530000 	cmp	r3, #0
     72c:	1afffffb 	bne	720 <video_text+0x1c>
     730:	e12fff1e 	bx	lr

00000734 <draw_score>:
void draw_ground(void) {
    short ground_color = resample_rgb(db, highlights_color);
    video_box(0, GROUND_Y, STANDARD_X, GROUND_Y + 2, ground_color);
}

void draw_score(int score) {
     734:	e92d4010 	push	{r4, lr}
     738:	e24dd018 	sub	sp, sp, #24
     73c:	e1a02000 	mov	r2, r0
    char score_display[20] = "Score: ";
     740:	e301373c 	movw	r3, #5948	; 0x173c
     744:	e3403000 	movt	r3, #0
     748:	e28d4004 	add	r4, sp, #4
     74c:	e8930003 	ldm	r3, {r0, r1}
     750:	e8840003 	stm	r4, {r0, r1}
     754:	e3a03000 	mov	r3, #0
     758:	e58d300c 	str	r3, [sp, #12]
     75c:	e58d3010 	str	r3, [sp, #16]
     760:	e58d3014 	str	r3, [sp, #20]
    int_to_string(score, score_display, 7);
     764:	e1a00002 	mov	r0, r2
     768:	e1a01004 	mov	r1, r4
     76c:	e3a02007 	mov	r2, #7
     770:	ebffff47 	bl	494 <int_to_string>
    video_text(1, 1, score_display);
     774:	e3a00001 	mov	r0, #1
     778:	e1a01000 	mov	r1, r0
     77c:	e1a02004 	mov	r2, r4
     780:	ebffffdf 	bl	704 <video_text>
}
     784:	e28dd018 	add	sp, sp, #24
     788:	e8bd8010 	pop	{r4, pc}

0000078c <video_box>:
        text_ptr++;
        offset++;
    }
}

void video_box(int x1, int y1, int x2, int y2, short pixel_color) {
     78c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     790:	e1a08001 	mov	r8, r1
     794:	e1a04002 	mov	r4, r2
     798:	e1a09003 	mov	r9, r3
     79c:	e1dd62f8 	ldrsh	r6, [sp, #40]	; 0x28
    int pixel_buf_ptr = *(int *)PIXEL_BUF_CTRL_BASE;
     7a0:	e3033fff 	movw	r3, #16383	; 0x3fff
     7a4:	e34f3f20 	movt	r3, #65312	; 0xff20
     7a8:	e5135fdf 	ldr	r5, [r3, #-4063]	; 0xfffff021
    int x_factor = 0x1 << (res_offset + col_offset);
     7ac:	e303c93c 	movw	r12, #14652	; 0x393c
     7b0:	e340c000 	movt	r12, #0
     7b4:	e59c3058 	ldr	r3, [r12, #88]	; 0x58
     7b8:	e59cb05c 	ldr	r11, [r12, #92]	; 0x5c
     7bc:	e083b00b 	add	r11, r3, r11
     7c0:	e3a0a001 	mov	r10, #1
     7c4:	e1a0bb1a 	lsl	r11, r10, r11
    int y_factor = 0x1 << (res_offset);
     7c8:	e1a0a31a 	lsl	r10, r10, r3
    int row;
    int col;

    // Scale coordinates
    x1 /= x_factor;
     7cc:	e1a0100b 	mov	r1, r11
     7d0:	eb00025a 	bl	1140 <__aeabi_idiv>
     7d4:	e1a07000 	mov	r7, r0
    x2 /= x_factor;
     7d8:	e1a00004 	mov	r0, r4
     7dc:	e1a0100b 	mov	r1, r11
     7e0:	eb000256 	bl	1140 <__aeabi_idiv>
     7e4:	e1a04000 	mov	r4, r0
    y1 /= y_factor;
     7e8:	e1a00008 	mov	r0, r8
     7ec:	e1a0100a 	mov	r1, r10
     7f0:	eb000252 	bl	1140 <__aeabi_idiv>
     7f4:	e1a08000 	mov	r8, r0
    y2 /= y_factor;
     7f8:	e1a00009 	mov	r0, r9
     7fc:	e1a0100a 	mov	r1, r10
     800:	eb00024e 	bl	1140 <__aeabi_idiv>

    for (row = y1; row <= y2; row++) {
     804:	e1580000 	cmp	r8, r0
     808:	c8bd8ff8 	popgt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
     80c:	ea00000d 	b	848 <video_box+0xbc>
        for (col = x1; col <= x2; col++) {
            int pixel_ptr = pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     810:	e592c058 	ldr	r12, [r2, #88]	; 0x58
     814:	e26cc00a 	rsb	r12, r12, #10
     818:	e592105c 	ldr	r1, [r2, #92]	; 0x5c
     81c:	e061c00c 	rsb	r12, r1, r12
     820:	e1a01083 	lsl	r1, r3, #1
            *(short *)pixel_ptr = pixel_color;
     824:	e085cc18 	add	r12, r5, r8, lsl r12
     828:	e18c60b1 	strh	r6, [r12, r1]
    x2 /= x_factor;
    y1 /= y_factor;
    y2 /= y_factor;

    for (row = y1; row <= y2; row++) {
        for (col = x1; col <= x2; col++) {
     82c:	e2833001 	add	r3, r3, #1
     830:	e1540003 	cmp	r4, r3
     834:	aafffff5 	bge	810 <video_box+0x84>
    x1 /= x_factor;
    x2 /= x_factor;
    y1 /= y_factor;
    y2 /= y_factor;

    for (row = y1; row <= y2; row++) {
     838:	e2888001 	add	r8, r8, #1
     83c:	e1500008 	cmp	r0, r8
     840:	aa000002 	bge	850 <video_box+0xc4>
     844:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
        for (col = x1; col <= x2; col++) {
            int pixel_ptr = pixel_buf_ptr + (row << (10 - res_offset - col_offset)) + (col << 1);
     848:	e303293c 	movw	r2, #14652	; 0x393c
     84c:	e3402000 	movt	r2, #0
    x2 /= x_factor;
    y1 /= y_factor;
    y2 /= y_factor;

    for (row = y1; row <= y2; row++) {
        for (col = x1; col <= x2; col++) {
     850:	e1570004 	cmp	r7, r4
     854:	d1a03007 	movle	r3, r7
     858:	daffffec 	ble	810 <video_box+0x84>
     85c:	eafffff5 	b	838 <video_box+0xac>

00000860 <resample_rgb>:
        }
    }
}

int resample_rgb(int num_bits, int color) {
    if (num_bits == 8) {
     860:	e3500008 	cmp	r0, #8
     864:	1a000008 	bne	88c <resample_rgb+0x2c>
        color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     868:	e1a025c1 	asr	r2, r1, #11
     86c:	e202201c 	and	r2, r2, #28
     870:	e1a03841 	asr	r3, r1, #16
     874:	e20330e0 	and	r3, r3, #224	; 0xe0
     878:	e1823003 	orr	r3, r2, r3
                 ((color >> 6) & 0x00000003));
     87c:	e7e11351 	ubfx	r1, r1, #6, #2
    }
}

int resample_rgb(int num_bits, int color) {
    if (num_bits == 8) {
        color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
     880:	e1831001 	orr	r1, r3, r1
                 ((color >> 6) & 0x00000003));
        color = (color << 8) | color;
     884:	e1811401 	orr	r1, r1, r1, lsl #8
     888:	ea000008 	b	8b0 <resample_rgb+0x50>
    } else if (num_bits == 16) {
     88c:	e3500010 	cmp	r0, #16
     890:	1a000006 	bne	8b0 <resample_rgb+0x50>
        color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     894:	e1a022c1 	asr	r2, r1, #5
     898:	e2022e7e 	and	r2, r2, #2016	; 0x7e0
     89c:	e1a03441 	asr	r3, r1, #8
     8a0:	e2033b3e 	and	r3, r3, #63488	; 0xf800
     8a4:	e1823003 	orr	r3, r2, r3
                 ((color >> 3) & 0x0000001F));
     8a8:	e7e411d1 	ubfx	r1, r1, #3, #5
    if (num_bits == 8) {
        color = (((color >> 16) & 0x000000E0) | ((color >> 11) & 0x0000001C) |
                 ((color >> 6) & 0x00000003));
        color = (color << 8) | color;
    } else if (num_bits == 16) {
        color = (((color >> 8) & 0x0000F800) | ((color >> 5) & 0x000007E0) |
     8ac:	e1831001 	orr	r1, r3, r1
                 ((color >> 3) & 0x0000001F));
    }
    return color;
}
     8b0:	e1a00001 	mov	r0, r1
     8b4:	e12fff1e 	bx	lr

000008b8 <draw_ground>:
            }
        }
    }
}

void draw_ground(void) {
     8b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     8bc:	e24dd00c 	sub	sp, sp, #12
    short ground_color = resample_rgb(db, highlights_color);
     8c0:	e303293c 	movw	r2, #14652	; 0x393c
     8c4:	e3402000 	movt	r2, #0
     8c8:	e30334e0 	movw	r3, #13536	; 0x34e0
     8cc:	e3403000 	movt	r3, #0
     8d0:	e5920060 	ldr	r0, [r2, #96]	; 0x60
     8d4:	e5931000 	ldr	r1, [r3]
     8d8:	ebffffe0 	bl	860 <resample_rgb>
    video_box(0, GROUND_Y, STANDARD_X, GROUND_Y + 2, ground_color);
     8dc:	e6bf0070 	sxth	r0, r0
     8e0:	e58d0000 	str	r0, [sp]
     8e4:	e3a00000 	mov	r0, #0
     8e8:	e3a010c8 	mov	r1, #200	; 0xc8
     8ec:	e3a02d05 	mov	r2, #320	; 0x140
     8f0:	e3a030ca 	mov	r3, #202	; 0xca
     8f4:	ebffffa4 	bl	78c <video_box>
}
     8f8:	e28dd00c 	add	sp, sp, #12
     8fc:	e8bd8000 	ldmfd	sp!, {pc}

00000900 <draw_bird>:
    } else if (type == OBSTACLE_TYPE_BIRD) {
        draw_bird(x, y);
    }
}

void draw_bird(int x, int y) {
     900:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     904:	e24dd00c 	sub	sp, sp, #12
     908:	e1a06001 	mov	r6, r1
    if (x >= 0 && x < STANDARD_X) {
     90c:	e1a07000 	mov	r7, r0
     910:	e3500d05 	cmp	r0, #320	; 0x140
     914:	2a000020 	bcs	99c <draw_bird+0x9c>
        short bird_color = resample_rgb(db, highlights_color);
     918:	e303293c 	movw	r2, #14652	; 0x393c
     91c:	e3402000 	movt	r2, #0
     920:	e30334e0 	movw	r3, #13536	; 0x34e0
     924:	e3403000 	movt	r3, #0
     928:	e5920060 	ldr	r0, [r2, #96]	; 0x60
     92c:	e5931000 	ldr	r1, [r3]
     930:	ebffffca 	bl	860 <resample_rgb>
     934:	e3a0a000 	mov	r10, #0
    } else if (type == OBSTACLE_TYPE_BIRD) {
        draw_bird(x, y);
    }
}

void draw_bird(int x, int y) {
     938:	e59fb064 	ldr	r11, [pc, #100]	; 9a4 <draw_bird+0xa4>
     93c:	e1a0900a 	mov	r9, r10
        int row, col;
        for (row = 0; row < BIRD_FRAME_HEIGHT; row++) {
            for (col = 0; col < BIRD_FRAME_WIDTH; col++) {
                uint32_t pixel = bird_data[0][row * BIRD_FRAME_WIDTH + col];
                if (pixel != 0x00000000) {  // If not transparent
                    video_box(x + col, y + row, x + col, y + row, bird_color);
     940:	e6bf8070 	sxth	r8, r0
     944:	ea000010 	b	98c <draw_bird+0x8c>
        short bird_color = resample_rgb(db, highlights_color);
        int row, col;
        for (row = 0; row < BIRD_FRAME_HEIGHT; row++) {
            for (col = 0; col < BIRD_FRAME_WIDTH; col++) {
                uint32_t pixel = bird_data[0][row * BIRD_FRAME_WIDTH + col];
                if (pixel != 0x00000000) {  // If not transparent
     948:	e5b53004 	ldr	r3, [r5, #4]!
     94c:	e3530000 	cmp	r3, #0
     950:	0a000005 	beq	96c <draw_bird+0x6c>
    } else if (type == OBSTACLE_TYPE_BIRD) {
        draw_bird(x, y);
    }
}

void draw_bird(int x, int y) {
     954:	e0872004 	add	r2, r7, r4
        int row, col;
        for (row = 0; row < BIRD_FRAME_HEIGHT; row++) {
            for (col = 0; col < BIRD_FRAME_WIDTH; col++) {
                uint32_t pixel = bird_data[0][row * BIRD_FRAME_WIDTH + col];
                if (pixel != 0x00000000) {  // If not transparent
                    video_box(x + col, y + row, x + col, y + row, bird_color);
     958:	e58d8000 	str	r8, [sp]
     95c:	e1a00002 	mov	r0, r2
     960:	e1a01006 	mov	r1, r6
     964:	e1a03006 	mov	r3, r6
     968:	ebffff87 	bl	78c <video_box>
void draw_bird(int x, int y) {
    if (x >= 0 && x < STANDARD_X) {
        short bird_color = resample_rgb(db, highlights_color);
        int row, col;
        for (row = 0; row < BIRD_FRAME_HEIGHT; row++) {
            for (col = 0; col < BIRD_FRAME_WIDTH; col++) {
     96c:	e2844001 	add	r4, r4, #1
     970:	e3540015 	cmp	r4, #21
     974:	1afffff3 	bne	948 <draw_bird+0x48>
     978:	e28aa015 	add	r10, r10, #21
     97c:	e2866001 	add	r6, r6, #1

void draw_bird(int x, int y) {
    if (x >= 0 && x < STANDARD_X) {
        short bird_color = resample_rgb(db, highlights_color);
        int row, col;
        for (row = 0; row < BIRD_FRAME_HEIGHT; row++) {
     980:	e3003126 	movw	r3, #294	; 0x126
     984:	e15a0003 	cmp	r10, r3
     988:	0a000003 	beq	99c <draw_bird+0x9c>
    } else if (type == OBSTACLE_TYPE_BIRD) {
        draw_bird(x, y);
    }
}

void draw_bird(int x, int y) {
     98c:	e08b510a 	add	r5, r11, r10, lsl #2
     990:	e2455004 	sub	r5, r5, #4
     994:	e1a04009 	mov	r4, r9
     998:	eaffffea 	b	948 <draw_bird+0x48>
                    video_box(x + col, y + row, x + col, y + row, bird_color);
                }
            }
        }
    }
}
     99c:	e28dd00c 	add	sp, sp, #12
     9a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     9a4:	00001750 	.word	0x00001750

000009a8 <draw_obstacle>:
            }
        }
    }
}

void draw_obstacle(int x, int y, int type) {
     9a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     9ac:	e24dd00c 	sub	sp, sp, #12
     9b0:	e1a09001 	mov	r9, r1
    if (type == OBSTACLE_TYPE_CACTUS) {
     9b4:	e3520000 	cmp	r2, #0
     9b8:	1a000029 	bne	a64 <draw_obstacle+0xbc>
        if (x >= 0 && x < STANDARD_X) {
     9bc:	e1a08000 	mov	r8, r0
     9c0:	e3500d05 	cmp	r0, #320	; 0x140
     9c4:	2a000029 	bcs	a70 <draw_obstacle+0xc8>
            short obstacle_color = resample_rgb(db, highlights_color);
     9c8:	e303293c 	movw	r2, #14652	; 0x393c
     9cc:	e3402000 	movt	r2, #0
     9d0:	e30334e0 	movw	r3, #13536	; 0x34e0
     9d4:	e3403000 	movt	r3, #0
     9d8:	e5920060 	ldr	r0, [r2, #96]	; 0x60
     9dc:	e5931000 	ldr	r1, [r3]
     9e0:	ebffff9e 	bl	860 <resample_rgb>
     9e4:	e59f708c 	ldr	r7, [pc, #140]	; a78 <draw_obstacle+0xd0>
            int row, col;
            for (row = 0; row < CACTUS_SPRITE_HEIGHT; row++) {
     9e8:	e3a05000 	mov	r5, #0
            }
        }
    }
}

void draw_obstacle(int x, int y, int type) {
     9ec:	e1a0b005 	mov	r11, r5
            short obstacle_color = resample_rgb(db, highlights_color);
            int row, col;
            for (row = 0; row < CACTUS_SPRITE_HEIGHT; row++) {
                for (col = 0; col < CACTUS_SPRITE_WIDTH; col++) {
                    if (cactus_get_pixel(row, col)) {
                        video_box(x + col, y + row, x + col, y + row, obstacle_color);
     9f0:	e6bfa070 	sxth	r10, r0
     9f4:	ea000017 	b	a58 <draw_obstacle+0xb0>
{0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}, 
{0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}
};

static inline int cactus_get_pixel(int row, int col) {
    if (row >= 0 && row < CACTUS_SPRITE_HEIGHT && col >= 0 && col < CACTUS_SPRITE_WIDTH) {
     9f8:	e1e03004 	mvn	r3, r4
     9fc:	e1a03fa3 	lsr	r3, r3, #31
     a00:	e355001b 	cmp	r5, #27
     a04:	83a03000 	movhi	r3, #0
     a08:	e3530000 	cmp	r3, #0
     a0c:	0a00000a 	beq	a3c <draw_obstacle+0x94>
     a10:	e3540011 	cmp	r4, #17
     a14:	ca000008 	bgt	a3c <draw_obstacle+0x94>
        if (x >= 0 && x < STANDARD_X) {
            short obstacle_color = resample_rgb(db, highlights_color);
            int row, col;
            for (row = 0; row < CACTUS_SPRITE_HEIGHT; row++) {
                for (col = 0; col < CACTUS_SPRITE_WIDTH; col++) {
                    if (cactus_get_pixel(row, col)) {
     a18:	e7973104 	ldr	r3, [r7, r4, lsl #2]
     a1c:	e3530000 	cmp	r3, #0
     a20:	0a000005 	beq	a3c <draw_obstacle+0x94>
            }
        }
    }
}

void draw_obstacle(int x, int y, int type) {
     a24:	e0882004 	add	r2, r8, r4
            short obstacle_color = resample_rgb(db, highlights_color);
            int row, col;
            for (row = 0; row < CACTUS_SPRITE_HEIGHT; row++) {
                for (col = 0; col < CACTUS_SPRITE_WIDTH; col++) {
                    if (cactus_get_pixel(row, col)) {
                        video_box(x + col, y + row, x + col, y + row, obstacle_color);
     a28:	e58da000 	str	r10, [sp]
     a2c:	e1a00002 	mov	r0, r2
     a30:	e1a01006 	mov	r1, r6
     a34:	e1a03006 	mov	r3, r6
     a38:	ebffff53 	bl	78c <video_box>
    if (type == OBSTACLE_TYPE_CACTUS) {
        if (x >= 0 && x < STANDARD_X) {
            short obstacle_color = resample_rgb(db, highlights_color);
            int row, col;
            for (row = 0; row < CACTUS_SPRITE_HEIGHT; row++) {
                for (col = 0; col < CACTUS_SPRITE_WIDTH; col++) {
     a3c:	e2844001 	add	r4, r4, #1
     a40:	e3540012 	cmp	r4, #18
     a44:	1affffeb 	bne	9f8 <draw_obstacle+0x50>
void draw_obstacle(int x, int y, int type) {
    if (type == OBSTACLE_TYPE_CACTUS) {
        if (x >= 0 && x < STANDARD_X) {
            short obstacle_color = resample_rgb(db, highlights_color);
            int row, col;
            for (row = 0; row < CACTUS_SPRITE_HEIGHT; row++) {
     a48:	e2855001 	add	r5, r5, #1
     a4c:	e2877048 	add	r7, r7, #72	; 0x48
     a50:	e355001c 	cmp	r5, #28
     a54:	0a000005 	beq	a70 <draw_obstacle+0xc8>
            }
        }
    }
}

void draw_obstacle(int x, int y, int type) {
     a58:	e1a0400b 	mov	r4, r11
     a5c:	e0896005 	add	r6, r9, r5
     a60:	eaffffe4 	b	9f8 <draw_obstacle+0x50>
                        video_box(x + col, y + row, x + col, y + row, obstacle_color);
                    }
                }
            }
        }
    } else if (type == OBSTACLE_TYPE_BIRD) {
     a64:	e3520001 	cmp	r2, #1
     a68:	1a000000 	bne	a70 <draw_obstacle+0xc8>
        draw_bird(x, y);
     a6c:	ebffffa3 	bl	900 <draw_bird>
    }
}
     a70:	e28dd00c 	add	sp, sp, #12
     a74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     a78:	00001be8 	.word	0x00001be8

00000a7c <draw_dino>:

void clear_screen(void) {
    video_box(0, 0, STANDARD_X, STANDARD_Y, resample_rgb(db, background_color));
}

void draw_dino(int x, int y, int frame) {
     a7c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a80:	e24dd00c 	sub	sp, sp, #12
     a84:	e1a08000 	mov	r8, r0
     a88:	e1a0a001 	mov	r10, r1
     a8c:	e1a04002 	mov	r4, r2
    short dino_color = resample_rgb(db, highlights_color);
     a90:	e303293c 	movw	r2, #14652	; 0x393c
     a94:	e3402000 	movt	r2, #0
     a98:	e30334e0 	movw	r3, #13536	; 0x34e0
     a9c:	e3403000 	movt	r3, #0
     aa0:	e5920060 	ldr	r0, [r2, #96]	; 0x60
     aa4:	e5931000 	ldr	r1, [r3]
     aa8:	ebffff6c 	bl	860 <resample_rgb>
     aac:	e6ff7070 	uxth	r7, r0
    int row, col;
    int pixel;
    if (frame % 5 == 0) {
     ab0:	e3063667 	movw	r3, #26215	; 0x6667
     ab4:	e3463666 	movt	r3, #26214	; 0x6666
     ab8:	e0c31493 	smull	r1, r3, r3, r4
     abc:	e1a02fc4 	asr	r2, r4, #31
     ac0:	e06230c3 	rsb	r3, r2, r3, asr #1
     ac4:	e0833103 	add	r3, r3, r3, lsl #2
     ac8:	e1540003 	cmp	r4, r3
     acc:	1a00002c 	bne	b84 <draw_dino+0x108>
        dino_leg = !dino_leg;  // Alternate leg for animation
     ad0:	e303393c 	movw	r3, #14652	; 0x393c
     ad4:	e3403000 	movt	r3, #0
     ad8:	e5932064 	ldr	r2, [r3, #100]	; 0x64
     adc:	e2722001 	rsbs	r2, r2, #1
     ae0:	33a02000 	movcc	r2, #0
     ae4:	e5832064 	str	r2, [r3, #100]	; 0x64
     ae8:	ea000025 	b	b84 <draw_dino+0x108>
    }
    for (row = 0; row < DINO_SPRITE_HEIGHT; row++) {
        for (col = 0; col < DINO_SPRITE_WIDTH; col++) {
            pixel = dino_get_pixel(row, col, dino_leg);
     aec:	e303393c 	movw	r3, #14652	; 0x393c
     af0:	e3403000 	movt	r3, #0
     af4:	e5931064 	ldr	r1, [r3, #100]	; 0x64
    {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
    {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

static inline int dino_get_pixel(int row, int col, int leg) {
    if (row >= 0 && row < DINO_SPRITE_HEIGHT && col >= 0 && col < DINO_SPRITE_WIDTH) {
     af8:	e1e02004 	mvn	r2, r4
     afc:	e1a02fa2 	lsr	r2, r2, #31
     b00:	e3560019 	cmp	r6, #25
     b04:	83a02000 	movhi	r2, #0
     b08:	e3520000 	cmp	r2, #0
     b0c:	0a00000f 	beq	b50 <draw_dino+0xd4>
     b10:	e3540013 	cmp	r4, #19
     b14:	ca00000d 	bgt	b50 <draw_dino+0xd4>
        if (leg == 0) {
     b18:	e3510000 	cmp	r1, #0

void clear_screen(void) {
    video_box(0, 0, STANDARD_X, STANDARD_Y, resample_rgb(db, background_color));
}

void draw_dino(int x, int y, int frame) {
     b1c:	059f1074 	ldreq	r1, [pc, #116]	; b98 <draw_dino+0x11c>
     b20:	00892001 	addeq	r2, r9, r1
            return dino_sprite_data_left[row][col];
     b24:	07922005 	ldreq	r2, [r2, r5]
        } else {
            return dino_sprite_data_right[row][col];
     b28:	179b2005 	ldrne	r2, [r11, r5]
        dino_leg = !dino_leg;  // Alternate leg for animation
    }
    for (row = 0; row < DINO_SPRITE_HEIGHT; row++) {
        for (col = 0; col < DINO_SPRITE_WIDTH; col++) {
            pixel = dino_get_pixel(row, col, dino_leg);
            if (pixel) {
     b2c:	e3520000 	cmp	r2, #0
     b30:	0a000006 	beq	b50 <draw_dino+0xd4>

void clear_screen(void) {
    video_box(0, 0, STANDARD_X, STANDARD_Y, resample_rgb(db, background_color));
}

void draw_dino(int x, int y, int frame) {
     b34:	e0842008 	add	r2, r4, r8
     b38:	e08a3006 	add	r3, r10, r6
    }
    for (row = 0; row < DINO_SPRITE_HEIGHT; row++) {
        for (col = 0; col < DINO_SPRITE_WIDTH; col++) {
            pixel = dino_get_pixel(row, col, dino_leg);
            if (pixel) {
                video_box(x + col, y + row, x + col, y + row, dino_color);
     b3c:	e6bf1077 	sxth	r1, r7
     b40:	e58d1000 	str	r1, [sp]
     b44:	e1a00002 	mov	r0, r2
     b48:	e1a01003 	mov	r1, r3
     b4c:	ebffff0e 	bl	78c <video_box>
    int pixel;
    if (frame % 5 == 0) {
        dino_leg = !dino_leg;  // Alternate leg for animation
    }
    for (row = 0; row < DINO_SPRITE_HEIGHT; row++) {
        for (col = 0; col < DINO_SPRITE_WIDTH; col++) {
     b50:	e2844001 	add	r4, r4, #1
     b54:	e2855004 	add	r5, r5, #4
     b58:	e3540014 	cmp	r4, #20
     b5c:	1affffe2 	bne	aec <draw_dino+0x70>
    int row, col;
    int pixel;
    if (frame % 5 == 0) {
        dino_leg = !dino_leg;  // Alternate leg for animation
    }
    for (row = 0; row < DINO_SPRITE_HEIGHT; row++) {
     b60:	e2866001 	add	r6, r6, #1
     b64:	e2899050 	add	r9, r9, #80	; 0x50
     b68:	e356001a 	cmp	r6, #26
     b6c:	0a000007 	beq	b90 <draw_dino+0x114>

void clear_screen(void) {
    video_box(0, 0, STANDARD_X, STANDARD_Y, resample_rgb(db, background_color));
}

void draw_dino(int x, int y, int frame) {
     b70:	e3a05000 	mov	r5, #0
     b74:	e1a04005 	mov	r4, r5
     b78:	e59f201c 	ldr	r2, [pc, #28]	; b9c <draw_dino+0x120>
     b7c:	e089b002 	add	r11, r9, r2
     b80:	eaffffd9 	b	aec <draw_dino+0x70>
     b84:	e3a09000 	mov	r9, #0
     b88:	e1a06009 	mov	r6, r9
     b8c:	eafffff7 	b	b70 <draw_dino+0xf4>
            if (pixel) {
                video_box(x + col, y + row, x + col, y + row, dino_color);
            }
        }
    }
}
     b90:	e28dd00c 	add	sp, sp, #12
     b94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     b98:	000023c8 	.word	0x000023c8
     b9c:	00002be8 	.word	0x00002be8

00000ba0 <render_game>:
            }
        }
    }
}

void render_game(void) {
     ba0:	e92d4030 	push	{r4, r5, lr}
     ba4:	e24dd00c 	sub	sp, sp, #12
    video_box(0, 0, STANDARD_X, GROUND_Y - 2, resample_rgb(db, background_color));
     ba8:	e303593c 	movw	r5, #14652	; 0x393c
     bac:	e3405000 	movt	r5, #0
     bb0:	e5950060 	ldr	r0, [r5, #96]	; 0x60
     bb4:	e5951068 	ldr	r1, [r5, #104]	; 0x68
     bb8:	ebffff28 	bl	860 <resample_rgb>
     bbc:	e6bf0070 	sxth	r0, r0
     bc0:	e58d0000 	str	r0, [sp]
     bc4:	e3a00000 	mov	r0, #0
     bc8:	e1a01000 	mov	r1, r0
     bcc:	e3a02d05 	mov	r2, #320	; 0x140
     bd0:	e3a030c6 	mov	r3, #198	; 0xc6
     bd4:	ebfffeec 	bl	78c <video_box>
    draw_dino(dino.x, dino.y, game.frame_counter);
     bd8:	e5950000 	ldr	r0, [r5]
     bdc:	e5951004 	ldr	r1, [r5, #4]
     be0:	e5952048 	ldr	r2, [r5, #72]	; 0x48
     be4:	ebffffa4 	bl	a7c <draw_dino>
     be8:	e285401c 	add	r4, r5, #28
            }
        }
    }
}

void render_game(void) {
     bec:	e285504c 	add	r5, r5, #76	; 0x4c
    video_box(0, 0, STANDARD_X, GROUND_Y - 2, resample_rgb(db, background_color));
    draw_dino(dino.x, dino.y, game.frame_counter);
    int i;
    for (i = 0; i < MAX_OBSTACLES; i++) {
        if (obstacles[i].active) {
     bf0:	e5943000 	ldr	r3, [r4]
     bf4:	e3530000 	cmp	r3, #0
     bf8:	0a000003 	beq	c0c <render_game+0x6c>
            draw_obstacle(obstacles[i].x, obstacles[i].y, obstacles[i].type);
     bfc:	e514000c 	ldr	r0, [r4, #-12]
     c00:	e5141008 	ldr	r1, [r4, #-8]
     c04:	e5142004 	ldr	r2, [r4, #-4]
     c08:	ebffff66 	bl	9a8 <draw_obstacle>
     c0c:	e2844010 	add	r4, r4, #16

void render_game(void) {
    video_box(0, 0, STANDARD_X, GROUND_Y - 2, resample_rgb(db, background_color));
    draw_dino(dino.x, dino.y, game.frame_counter);
    int i;
    for (i = 0; i < MAX_OBSTACLES; i++) {
     c10:	e1540005 	cmp	r4, r5
     c14:	1afffff5 	bne	bf0 <render_game+0x50>
        if (obstacles[i].active) {
            draw_obstacle(obstacles[i].x, obstacles[i].y, obstacles[i].type);
        }
    }
    draw_score(game.score);
     c18:	e303393c 	movw	r3, #14652	; 0x393c
     c1c:	e3403000 	movt	r3, #0
     c20:	e5930040 	ldr	r0, [r3, #64]	; 0x40
     c24:	ebfffec2 	bl	734 <draw_score>
}
     c28:	e28dd00c 	add	sp, sp, #12
     c2c:	e8bd8030 	pop	{r4, r5, pc}

00000c30 <clear_screen>:
    }
    
    return 0;
}

void clear_screen(void) {
     c30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c34:	e24dd00c 	sub	sp, sp, #12
    video_box(0, 0, STANDARD_X, STANDARD_Y, resample_rgb(db, background_color));
     c38:	e303393c 	movw	r3, #14652	; 0x393c
     c3c:	e3403000 	movt	r3, #0
     c40:	e5930060 	ldr	r0, [r3, #96]	; 0x60
     c44:	e5931068 	ldr	r1, [r3, #104]	; 0x68
     c48:	ebffff04 	bl	860 <resample_rgb>
     c4c:	e6bf0070 	sxth	r0, r0
     c50:	e58d0000 	str	r0, [sp]
     c54:	e3a00000 	mov	r0, #0
     c58:	e1a01000 	mov	r1, r0
     c5c:	e3a02d05 	mov	r2, #320	; 0x140
     c60:	e3a030f0 	mov	r3, #240	; 0xf0
     c64:	ebfffec8 	bl	78c <video_box>
}
     c68:	e28dd00c 	add	sp, sp, #12
     c6c:	e8bd8000 	ldmfd	sp!, {pc}

00000c70 <show_game_over_screen>:
    video_text(10, 12, "Press KEY0 to jump");
    video_text(10, 13, "Duck under birds!");
    video_text(10, 14, "Press KEY1 to start");
}

void show_game_over_screen(int final_score) {
     c70:	e92d4070 	push	{r4, r5, r6, lr}
     c74:	e24dd020 	sub	sp, sp, #32
     c78:	e1a06000 	mov	r6, r0
    background_color = 0x000000; // Reset background color
     c7c:	e303393c 	movw	r3, #14652	; 0x393c
     c80:	e3403000 	movt	r3, #0
     c84:	e3a04000 	mov	r4, #0
     c88:	e5834068 	str	r4, [r3, #104]	; 0x68
    highlights_color = 0xFFFFFF; // Reset highlights color
     c8c:	e30324e0 	movw	r2, #13536	; 0x34e0
     c90:	e3402000 	movt	r2, #0
     c94:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
     c98:	e5821000 	str	r1, [r2]
    inverted_colors = 0; // Reset inverted colors
     c9c:	e583406c 	str	r4, [r3, #108]	; 0x6c

    clear_screen();
     ca0:	ebffffe2 	bl	c30 <clear_screen>
    video_text(12, 10, "GAME OVER!");
     ca4:	e3a0000c 	mov	r0, #12
     ca8:	e3a0100a 	mov	r1, #10
     cac:	e3032408 	movw	r2, #13320	; 0x3408
     cb0:	e3402000 	movt	r2, #0
     cb4:	ebfffe92 	bl	704 <video_text>
    
    char score_text[30] = "Score: ";
     cb8:	e301373c 	movw	r3, #5948	; 0x173c
     cbc:	e3403000 	movt	r3, #0
     cc0:	e1a0500d 	mov	r5, sp
     cc4:	e8930003 	ldm	r3, {r0, r1}
     cc8:	e88d0003 	stm	sp, {r0, r1}
     ccc:	e58d4008 	str	r4, [sp, #8]
     cd0:	e58d400c 	str	r4, [sp, #12]
     cd4:	e58d4010 	str	r4, [sp, #16]
     cd8:	e58d4014 	str	r4, [sp, #20]
     cdc:	e58d4018 	str	r4, [sp, #24]
     ce0:	e1cd41bc 	strh	r4, [sp, #28]
    int_to_string(final_score, score_text, 7);
     ce4:	e1a00006 	mov	r0, r6
     ce8:	e1a0100d 	mov	r1, sp
     cec:	e3a02007 	mov	r2, #7
     cf0:	ebfffde7 	bl	494 <int_to_string>
    video_text(10, 12, score_text);
     cf4:	e3a0000a 	mov	r0, #10
     cf8:	e3a0100c 	mov	r1, #12
     cfc:	e1a0200d 	mov	r2, sp
     d00:	ebfffe7f 	bl	704 <video_text>
    video_text(8, 14, "Press KEY1 to restart");
     d04:	e3a00008 	mov	r0, #8
     d08:	e3a0100e 	mov	r1, #14
     d0c:	e3032414 	movw	r2, #13332	; 0x3414
     d10:	e3402000 	movt	r2, #0
     d14:	ebfffe7a 	bl	704 <video_text>
}
     d18:	e28dd020 	add	sp, sp, #32
     d1c:	e8bd8070 	pop	{r4, r5, r6, pc}

00000d20 <show_start_screen>:
        }
    }
    draw_score(game.score);
}

void show_start_screen(void) {
     d20:	e92d4008 	push	{r3, lr}
    clear_screen();
     d24:	ebffffc1 	bl	c30 <clear_screen>
    video_text(10, 10, "Chrome Dino Game");
     d28:	e3a0000a 	mov	r0, #10
     d2c:	e1a01000 	mov	r1, r0
     d30:	e303242c 	movw	r2, #13356	; 0x342c
     d34:	e3402000 	movt	r2, #0
     d38:	ebfffe71 	bl	704 <video_text>
    video_text(10, 12, "Press KEY0 to jump");
     d3c:	e3a0000a 	mov	r0, #10
     d40:	e3a0100c 	mov	r1, #12
     d44:	e3032440 	movw	r2, #13376	; 0x3440
     d48:	e3402000 	movt	r2, #0
     d4c:	ebfffe6c 	bl	704 <video_text>
    video_text(10, 13, "Duck under birds!");
     d50:	e3a0000a 	mov	r0, #10
     d54:	e3a0100d 	mov	r1, #13
     d58:	e3032454 	movw	r2, #13396	; 0x3454
     d5c:	e3402000 	movt	r2, #0
     d60:	ebfffe67 	bl	704 <video_text>
    video_text(10, 14, "Press KEY1 to start");
     d64:	e3a0000a 	mov	r0, #10
     d68:	e3a0100e 	mov	r1, #14
     d6c:	e3032468 	movw	r2, #13416	; 0x3468
     d70:	e3402000 	movt	r2, #0
     d74:	ebfffe62 	bl	704 <video_text>
     d78:	e8bd8008 	pop	{r3, pc}

00000d7c <get_data_bits>:
    }
    return color;
}

int get_data_bits(int mode) {
    switch (mode) {
     d7c:	e3500039 	cmp	r0, #57	; 0x39
     d80:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     d84:	ea00004b 	b	eb8 <get_data_bits+0x13c>
     d88:	00000e70 	.word	0x00000e70
     d8c:	00000eb8 	.word	0x00000eb8
     d90:	00000eb8 	.word	0x00000eb8
     d94:	00000eb8 	.word	0x00000eb8
     d98:	00000eb8 	.word	0x00000eb8
     d9c:	00000eb8 	.word	0x00000eb8
     da0:	00000eb8 	.word	0x00000eb8
     da4:	00000ec0 	.word	0x00000ec0
     da8:	00000eb8 	.word	0x00000eb8
     dac:	00000eb8 	.word	0x00000eb8
     db0:	00000eb8 	.word	0x00000eb8
     db4:	00000eb8 	.word	0x00000eb8
     db8:	00000eb8 	.word	0x00000eb8
     dbc:	00000eb8 	.word	0x00000eb8
     dc0:	00000eb8 	.word	0x00000eb8
     dc4:	00000eb8 	.word	0x00000eb8
     dc8:	00000eb8 	.word	0x00000eb8
     dcc:	00000ec0 	.word	0x00000ec0
     dd0:	00000e78 	.word	0x00000e78
     dd4:	00000eb8 	.word	0x00000eb8
     dd8:	00000e80 	.word	0x00000e80
     ddc:	00000eb8 	.word	0x00000eb8
     de0:	00000eb8 	.word	0x00000eb8
     de4:	00000e88 	.word	0x00000e88
     de8:	00000eb8 	.word	0x00000eb8
     dec:	00000e90 	.word	0x00000e90
     df0:	00000eb8 	.word	0x00000eb8
     df4:	00000eb8 	.word	0x00000eb8
     df8:	00000eb8 	.word	0x00000eb8
     dfc:	00000eb8 	.word	0x00000eb8
     e00:	00000eb8 	.word	0x00000eb8
     e04:	00000eb8 	.word	0x00000eb8
     e08:	00000eb8 	.word	0x00000eb8
     e0c:	00000eb8 	.word	0x00000eb8
     e10:	00000eb8 	.word	0x00000eb8
     e14:	00000eb8 	.word	0x00000eb8
     e18:	00000eb8 	.word	0x00000eb8
     e1c:	00000eb8 	.word	0x00000eb8
     e20:	00000eb8 	.word	0x00000eb8
     e24:	00000eb8 	.word	0x00000eb8
     e28:	00000eb8 	.word	0x00000eb8
     e2c:	00000eb8 	.word	0x00000eb8
     e30:	00000eb8 	.word	0x00000eb8
     e34:	00000eb8 	.word	0x00000eb8
     e38:	00000eb8 	.word	0x00000eb8
     e3c:	00000eb8 	.word	0x00000eb8
     e40:	00000eb8 	.word	0x00000eb8
     e44:	00000eb8 	.word	0x00000eb8
     e48:	00000eb8 	.word	0x00000eb8
     e4c:	00000ec0 	.word	0x00000ec0
     e50:	00000e98 	.word	0x00000e98
     e54:	00000ea0 	.word	0x00000ea0
     e58:	00000eb8 	.word	0x00000eb8
     e5c:	00000eb8 	.word	0x00000eb8
     e60:	00000eb8 	.word	0x00000eb8
     e64:	00000ea8 	.word	0x00000ea8
     e68:	00000eb8 	.word	0x00000eb8
     e6c:	00000eb0 	.word	0x00000eb0
    case 0x0:
        return 1;
     e70:	e3a00001 	mov	r0, #1
     e74:	e12fff1e 	bx	lr
    case 0x7:
        return 8;
    case 0x11:
        return 8;
    case 0x12:
        return 9;
     e78:	e3a00009 	mov	r0, #9
     e7c:	e12fff1e 	bx	lr
    case 0x14:
        return 16;
     e80:	e3a00010 	mov	r0, #16
     e84:	e12fff1e 	bx	lr
    case 0x17:
        return 24;
     e88:	e3a00018 	mov	r0, #24
     e8c:	e12fff1e 	bx	lr
    case 0x19:
        return 30;
     e90:	e3a0001e 	mov	r0, #30
     e94:	e12fff1e 	bx	lr
    case 0x31:
        return 8;
    case 0x32:
        return 12;
     e98:	e3a0000c 	mov	r0, #12
     e9c:	e12fff1e 	bx	lr
    case 0x33:
        return 16;
     ea0:	e3a00010 	mov	r0, #16
     ea4:	e12fff1e 	bx	lr
    case 0x37:
        return 32;
     ea8:	e3a00020 	mov	r0, #32
     eac:	e12fff1e 	bx	lr
    case 0x39:
        return 40;
     eb0:	e3a00028 	mov	r0, #40	; 0x28
     eb4:	e12fff1e 	bx	lr
    default:
        return 16;
     eb8:	e3a00010 	mov	r0, #16
     ebc:	e12fff1e 	bx	lr
int get_data_bits(int mode) {
    switch (mode) {
    case 0x0:
        return 1;
    case 0x7:
        return 8;
     ec0:	e3a00008 	mov	r0, #8
    case 0x39:
        return 40;
    default:
        return 16;
    }
}
     ec4:	e12fff1e 	bx	lr

00000ec8 <init_game_state>:
            dino_y < obs_y + obs_height &&
            dino_y + DINO_SPRITE_HEIGHT > obs_y);
}

// Helper function implementations
void init_game_state(void) {
     ec8:	e92d4038 	push	{r3, r4, r5, lr}
    volatile int *video_resolution = (int *)(PIXEL_BUF_CTRL_BASE + 0x8);
    screen_x = *video_resolution & 0xFFFF;
     ecc:	e3033fff 	movw	r3, #16383	; 0x3fff
     ed0:	e34f3f20 	movt	r3, #65312	; 0xff20
     ed4:	e5135fd7 	ldr	r5, [r3, #-4055]	; 0xfffff029
     ed8:	e6ff5075 	uxth	r5, r5
     edc:	e303493c 	movw	r4, #14652	; 0x393c
     ee0:	e3404000 	movt	r4, #0
     ee4:	e5845070 	str	r5, [r4, #112]	; 0x70
    screen_y = (*video_resolution >> 16) & 0xFFFF;
     ee8:	e5132fd7 	ldr	r2, [r3, #-4055]	; 0xfffff029
     eec:	e1a02822 	lsr	r2, r2, #16
     ef0:	e5842074 	str	r2, [r4, #116]	; 0x74

    volatile int *rgb_status = (int *)(RGB_RESAMPLER_BASE);
    db = get_data_bits(*rgb_status & 0x3F);
     ef4:	e5130fef 	ldr	r0, [r3, #-4079]	; 0xfffff011
     ef8:	e200003f 	and	r0, r0, #63	; 0x3f
     efc:	ebffff9e 	bl	d7c <get_data_bits>
     f00:	e5840060 	str	r0, [r4, #96]	; 0x60

    res_offset = (screen_x == 160) ? 1 : 0;
     f04:	e35500a0 	cmp	r5, #160	; 0xa0
     f08:	13a05000 	movne	r5, #0
     f0c:	03a05001 	moveq	r5, #1
     f10:	e5845058 	str	r5, [r4, #88]	; 0x58
    col_offset = (db == 8) ? 1 : 0;
     f14:	e3500008 	cmp	r0, #8
     f18:	13a00000 	movne	r0, #0
     f1c:	03a00001 	moveq	r0, #1
     f20:	e584005c 	str	r0, [r4, #92]	; 0x5c
    srand(42);
     f24:	e3a0002a 	mov	r0, #42	; 0x2a
     f28:	eb0000ec 	bl	12e0 <srand>
     f2c:	e8bd8038 	pop	{r3, r4, r5, pc}

00000f30 <clear_text_screen>:
    default:
        return 16;
    }
}

void clear_text_screen(void) {
     f30:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    volatile char *character_buffer = (char *)FPGA_CHAR_BASE;
    int i;
    
    // Clear the entire character buffer (80 columns x 60 rows)
    for (i = 0; i < 80 * 60; i++) {
        *(character_buffer + i) = ' ';
     f34:	e3a01020 	mov	r1, #32
void clear_text_screen(void) {
    volatile char *character_buffer = (char *)FPGA_CHAR_BASE;
    int i;
    
    // Clear the entire character buffer (80 columns x 60 rows)
    for (i = 0; i < 80 * 60; i++) {
     f38:	e3a02d4b 	mov	r2, #4800	; 0x12c0
     f3c:	e34c2900 	movt	r2, #51456	; 0xc900
        *(character_buffer + i) = ' ';
     f40:	e4c31001 	strb	r1, [r3], #1
void clear_text_screen(void) {
    volatile char *character_buffer = (char *)FPGA_CHAR_BASE;
    int i;
    
    // Clear the entire character buffer (80 columns x 60 rows)
    for (i = 0; i < 80 * 60; i++) {
     f44:	e1530002 	cmp	r3, r2
     f48:	1afffffc 	bne	f40 <clear_text_screen+0x10>
        *(character_buffer + i) = ' ';
    }
}
     f4c:	e12fff1e 	bx	lr

00000f50 <main>:
GameState game;

// Timer to control time between obstacle spawns
int obstacle_spawn_timer = 0;

int main(void) {
     f50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f54:	e24dd014 	sub	sp, sp, #20
    volatile int *key_ptr = (int *)KEY_BASE;
    
    init_game_state();
     f58:	ebffffda 	bl	ec8 <init_game_state>
        
        clear_screen();
        clear_text_screen();  
        draw_ground();
        // Main game loop
        while (!game.game_over) {
     f5c:	e303593c 	movw	r5, #14652	; 0x393c
     f60:	e3405000 	movt	r5, #0
            handle_jump_logic(key_ptr);
     f64:	e3a09050 	mov	r9, #80	; 0x50
     f68:	e34f9f20 	movt	r9, #65312	; 0xff20
GameState game;

// Timer to control time between obstacle spawns
int obstacle_spawn_timer = 0;

int main(void) {
     f6c:	e285704c 	add	r7, r5, #76	; 0x4c
                }
            }
            // Increment score every N frames
            if (game.frame_counter % SCORE_FRAME_INTERVAL == 0) {
                game.score += FRAME_SCORE_INCREMENT;
                if (game.score % SPEED_INCREASE_FACTOR == 0 && game.current_speed > 10000) {
     f70:	e3062667 	movw	r2, #26215	; 0x6667
     f74:	e3462666 	movt	r2, #26214	; 0x6666
     f78:	e58d2008 	str	r2, [sp, #8]
                    game.current_speed -= 10000;
                }
                if (game.score % 200 == 0) {
     f7c:	e308351f 	movw	r3, #34079	; 0x851f
     f80:	e34531eb 	movt	r3, #20971	; 0x51eb
     f84:	e58d300c 	str	r3, [sp, #12]
                    inverted_colors = 100;
                }
                if (inverted_colors == 1) {
                    int aux;
                    aux = background_color;
                    background_color = highlights_color;
     f88:	e303b4e0 	movw	r11, #13536	; 0x34e0
     f8c:	e340b000 	movt	r11, #0
    volatile int *key_ptr = (int *)KEY_BASE;
    
    init_game_state();
    
    while (1) {
        reset_game_state();
     f90:	ebfffcd2 	bl	2e0 <reset_game_state>
        show_start_screen();
     f94:	ebffff61 	bl	d20 <show_start_screen>
        
        // Wait for key release then press to start
        while ((*key_ptr & 0x2) != 0);
     f98:	e3a02000 	mov	r2, #0
     f9c:	e34f2f20 	movt	r2, #65312	; 0xff20
     fa0:	e5923050 	ldr	r3, [r2, #80]	; 0x50
     fa4:	e3130002 	tst	r3, #2
     fa8:	1afffffc 	bne	fa0 <main+0x50>
        delay(1000);
        while ((*key_ptr & 0x2) == 0);
     fac:	e3a02000 	mov	r2, #0
     fb0:	e34f2f20 	movt	r2, #65312	; 0xff20
     fb4:	e5923050 	ldr	r3, [r2, #80]	; 0x50
     fb8:	e3130002 	tst	r3, #2
     fbc:	0afffffc 	beq	fb4 <main+0x64>
        
        clear_screen();
     fc0:	ebffff1a 	bl	c30 <clear_screen>
        clear_text_screen();  
     fc4:	ebffffd9 	bl	f30 <clear_text_screen>
        draw_ground();
     fc8:	ebfffe3a 	bl	8b8 <draw_ground>
        // Main game loop
        while (!game.game_over) {
     fcc:	e5953044 	ldr	r3, [r5, #68]	; 0x44
     fd0:	e3530000 	cmp	r3, #0
     fd4:	1a00004c 	bne	110c <main+0x1bc>
            handle_jump_logic(key_ptr);
     fd8:	e1a00009 	mov	r0, r9
     fdc:	ebfffcd9 	bl	348 <handle_jump_logic>
            handle_obstacle_movement();
     fe0:	ebfffd63 	bl	574 <handle_obstacle_movement>
            int i;
            for (i = 0; i < MAX_OBSTACLES; i++) {
                if (obstacles[i].active && check_collision(dino.x, dino.y, obstacles[i].x, obstacles[i].y, obstacles[i].type)) {
     fe4:	e595a000 	ldr	r10, [r5]
     fe8:	e5958004 	ldr	r8, [r5, #4]
     fec:	e5956044 	ldr	r6, [r5, #68]	; 0x44
     ff0:	e285401c 	add	r4, r5, #28
     ff4:	e5943000 	ldr	r3, [r4]
     ff8:	e3530000 	cmp	r3, #0
     ffc:	0a000008 	beq	1024 <main+0xd4>
    1000:	e514200c 	ldr	r2, [r4, #-12]
    1004:	e5143008 	ldr	r3, [r4, #-8]
    1008:	e5141004 	ldr	r1, [r4, #-4]
    100c:	e58d1000 	str	r1, [sp]
    1010:	e1a0000a 	mov	r0, r10
    1014:	e1a01008 	mov	r1, r8
    1018:	ebfffc8f 	bl	25c <check_collision>
                    game.game_over = 1;
    101c:	e3500000 	cmp	r0, #0
    1020:	13a06001 	movne	r6, #1
    1024:	e2844010 	add	r4, r4, #16
        // Main game loop
        while (!game.game_over) {
            handle_jump_logic(key_ptr);
            handle_obstacle_movement();
            int i;
            for (i = 0; i < MAX_OBSTACLES; i++) {
    1028:	e1540007 	cmp	r4, r7
    102c:	1afffff0 	bne	ff4 <main+0xa4>
    1030:	e5856044 	str	r6, [r5, #68]	; 0x44
                if (obstacles[i].active && check_collision(dino.x, dino.y, obstacles[i].x, obstacles[i].y, obstacles[i].type)) {
                    game.game_over = 1;
                }
            }
            // Increment score every N frames
            if (game.frame_counter % SCORE_FRAME_INTERVAL == 0) {
    1034:	e5953048 	ldr	r3, [r5, #72]	; 0x48
    1038:	e3130001 	tst	r3, #1
    103c:	1a00002b 	bne	10f0 <main+0x1a0>
                game.score += FRAME_SCORE_INCREMENT;
    1040:	e5953040 	ldr	r3, [r5, #64]	; 0x40
    1044:	e2833001 	add	r3, r3, #1
    1048:	e5853040 	str	r3, [r5, #64]	; 0x40
                if (game.score % SPEED_INCREASE_FACTOR == 0 && game.current_speed > 10000) {
    104c:	e59d2008 	ldr	r2, [sp, #8]
    1050:	e0c12392 	smull	r2, r1, r2, r3
    1054:	e1a02fc3 	asr	r2, r3, #31
    1058:	e06221c1 	rsb	r2, r2, r1, asr #3
    105c:	e0822102 	add	r2, r2, r2, lsl #2
    1060:	e1530102 	cmp	r3, r2, lsl #2
    1064:	1a000005 	bne	1080 <main+0x130>
    1068:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    106c:	e3021710 	movw	r1, #10000	; 0x2710
    1070:	e1520001 	cmp	r2, r1
                    game.current_speed -= 10000;
    1074:	c2422c27 	subgt	r2, r2, #9984	; 0x2700
    1078:	c2422010 	subgt	r2, r2, #16
    107c:	c585204c 	strgt	r2, [r5, #76]	; 0x4c
                }
                if (game.score % 200 == 0) {
    1080:	e59d200c 	ldr	r2, [sp, #12]
    1084:	e0c12392 	smull	r2, r1, r2, r3
    1088:	e1a02fc3 	asr	r2, r3, #31
    108c:	e0622341 	rsb	r2, r2, r1, asr #6
    1090:	e3a010c8 	mov	r1, #200	; 0xc8
    1094:	e0633291 	mls	r3, r1, r2, r3
    1098:	e3530000 	cmp	r3, #0
    109c:	1a000005 	bne	10b8 <main+0x168>
                    int aux;
                    aux = background_color;
    10a0:	e5953068 	ldr	r3, [r5, #104]	; 0x68
                    background_color = highlights_color;
    10a4:	e59b2000 	ldr	r2, [r11]
    10a8:	e5852068 	str	r2, [r5, #104]	; 0x68
                    highlights_color = aux;
    10ac:	e58b3000 	str	r3, [r11]
                    inverted_colors = 100;
                }
                if (inverted_colors == 1) {
    10b0:	e3a03064 	mov	r3, #100	; 0x64
    10b4:	ea00000b 	b	10e8 <main+0x198>
    10b8:	e595306c 	ldr	r3, [r5, #108]	; 0x6c
    10bc:	e3530001 	cmp	r3, #1
    10c0:	1a000006 	bne	10e0 <main+0x190>
                    int aux;
                    aux = background_color;
    10c4:	e5953068 	ldr	r3, [r5, #104]	; 0x68
                    background_color = highlights_color;
    10c8:	e59b2000 	ldr	r2, [r11]
    10cc:	e5852068 	str	r2, [r5, #104]	; 0x68
                    highlights_color = aux;
    10d0:	e58b3000 	str	r3, [r11]
                    inverted_colors = 0;
    10d4:	e3a03000 	mov	r3, #0
    10d8:	e585306c 	str	r3, [r5, #108]	; 0x6c
    10dc:	ea000003 	b	10f0 <main+0x1a0>
                }
                else if (inverted_colors > 0) {
    10e0:	e3530000 	cmp	r3, #0
    10e4:	da000001 	ble	10f0 <main+0x1a0>
                    inverted_colors--;
    10e8:	e2433001 	sub	r3, r3, #1
    10ec:	e585306c 	str	r3, [r5, #108]	; 0x6c
                }   
            }
            render_game();
    10f0:	ebfffeaa 	bl	ba0 <render_game>
            delay(game.current_speed);
            game.frame_counter++;
    10f4:	e5953048 	ldr	r3, [r5, #72]	; 0x48
    10f8:	e2833001 	add	r3, r3, #1
    10fc:	e5853048 	str	r3, [r5, #72]	; 0x48
        
        clear_screen();
        clear_text_screen();  
        draw_ground();
        // Main game loop
        while (!game.game_over) {
    1100:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    1104:	e3530000 	cmp	r3, #0
    1108:	0affffb2 	beq	fd8 <main+0x88>
            render_game();
            delay(game.current_speed);
            game.frame_counter++;
        }
        
        show_game_over_screen(game.score);
    110c:	e5950040 	ldr	r0, [r5, #64]	; 0x40
    1110:	ebfffed6 	bl	c70 <show_game_over_screen>
        
        // Wait for restart
        while ((*key_ptr & 0x2) != 0);
    1114:	e3a02000 	mov	r2, #0
    1118:	e34f2f20 	movt	r2, #65312	; 0xff20
    111c:	e5923050 	ldr	r3, [r2, #80]	; 0x50
    1120:	e3130002 	tst	r3, #2
    1124:	1afffffc 	bne	111c <main+0x1cc>
        while ((*key_ptr & 0x2) == 0);
    1128:	e3a02000 	mov	r2, #0
    112c:	e34f2f20 	movt	r2, #65312	; 0xff20
    1130:	e5923050 	ldr	r3, [r2, #80]	; 0x50
    1134:	e3130002 	tst	r3, #2
    1138:	0afffffc 	beq	1130 <main+0x1e0>
    113c:	eaffff93 	b	f90 <main+0x40>

00001140 <__aeabi_idiv>:
    1140:	e3510000 	cmp	r1, #0
    1144:	0a000043 	beq	1258 <.divsi3_skip_div0_test+0x110>

00001148 <.divsi3_skip_div0_test>:
    1148:	e020c001 	eor	r12, r0, r1
    114c:	42611000 	rsbmi	r1, r1, #0
    1150:	e2512001 	subs	r2, r1, #1
    1154:	0a000027 	beq	11f8 <.divsi3_skip_div0_test+0xb0>
    1158:	e1b03000 	movs	r3, r0
    115c:	42603000 	rsbmi	r3, r0, #0
    1160:	e1530001 	cmp	r3, r1
    1164:	9a000026 	bls	1204 <.divsi3_skip_div0_test+0xbc>
    1168:	e1110002 	tst	r1, r2
    116c:	0a000028 	beq	1214 <.divsi3_skip_div0_test+0xcc>
    1170:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1174:	01a01181 	lsleq	r1, r1, #3
    1178:	03a02008 	moveq	r2, #8
    117c:	13a02001 	movne	r2, #1
    1180:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1184:	31510003 	cmpcc	r1, r3
    1188:	31a01201 	lslcc	r1, r1, #4
    118c:	31a02202 	lslcc	r2, r2, #4
    1190:	3afffffa 	bcc	1180 <.divsi3_skip_div0_test+0x38>
    1194:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1198:	31510003 	cmpcc	r1, r3
    119c:	31a01081 	lslcc	r1, r1, #1
    11a0:	31a02082 	lslcc	r2, r2, #1
    11a4:	3afffffa 	bcc	1194 <.divsi3_skip_div0_test+0x4c>
    11a8:	e3a00000 	mov	r0, #0
    11ac:	e1530001 	cmp	r3, r1
    11b0:	20433001 	subcs	r3, r3, r1
    11b4:	21800002 	orrcs	r0, r0, r2
    11b8:	e15300a1 	cmp	r3, r1, lsr #1
    11bc:	204330a1 	subcs	r3, r3, r1, lsr #1
    11c0:	218000a2 	orrcs	r0, r0, r2, lsr #1
    11c4:	e1530121 	cmp	r3, r1, lsr #2
    11c8:	20433121 	subcs	r3, r3, r1, lsr #2
    11cc:	21800122 	orrcs	r0, r0, r2, lsr #2
    11d0:	e15301a1 	cmp	r3, r1, lsr #3
    11d4:	204331a1 	subcs	r3, r3, r1, lsr #3
    11d8:	218001a2 	orrcs	r0, r0, r2, lsr #3
    11dc:	e3530000 	cmp	r3, #0
    11e0:	11b02222 	lsrsne	r2, r2, #4
    11e4:	11a01221 	lsrne	r1, r1, #4
    11e8:	1affffef 	bne	11ac <.divsi3_skip_div0_test+0x64>
    11ec:	e35c0000 	cmp	r12, #0
    11f0:	42600000 	rsbmi	r0, r0, #0
    11f4:	e12fff1e 	bx	lr
    11f8:	e13c0000 	teq	r12, r0
    11fc:	42600000 	rsbmi	r0, r0, #0
    1200:	e12fff1e 	bx	lr
    1204:	33a00000 	movcc	r0, #0
    1208:	01a00fcc 	asreq	r0, r12, #31
    120c:	03800001 	orreq	r0, r0, #1
    1210:	e12fff1e 	bx	lr
    1214:	e3510801 	cmp	r1, #65536	; 0x10000
    1218:	21a01821 	lsrcs	r1, r1, #16
    121c:	23a02010 	movcs	r2, #16
    1220:	33a02000 	movcc	r2, #0
    1224:	e3510c01 	cmp	r1, #256	; 0x100
    1228:	21a01421 	lsrcs	r1, r1, #8
    122c:	22822008 	addcs	r2, r2, #8
    1230:	e3510010 	cmp	r1, #16
    1234:	21a01221 	lsrcs	r1, r1, #4
    1238:	22822004 	addcs	r2, r2, #4
    123c:	e3510004 	cmp	r1, #4
    1240:	82822003 	addhi	r2, r2, #3
    1244:	908220a1 	addls	r2, r2, r1, lsr #1
    1248:	e35c0000 	cmp	r12, #0
    124c:	e1a00233 	lsr	r0, r3, r2
    1250:	42600000 	rsbmi	r0, r0, #0
    1254:	e12fff1e 	bx	lr
    1258:	e3500000 	cmp	r0, #0
    125c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    1260:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    1264:	ea000007 	b	1288 <__aeabi_idiv0>

00001268 <__aeabi_idivmod>:
    1268:	e3510000 	cmp	r1, #0
    126c:	0afffff9 	beq	1258 <.divsi3_skip_div0_test+0x110>
    1270:	e92d4003 	push	{r0, r1, lr}
    1274:	ebffffb3 	bl	1148 <.divsi3_skip_div0_test>
    1278:	e8bd4006 	pop	{r1, r2, lr}
    127c:	e0030092 	mul	r3, r2, r0
    1280:	e0411003 	sub	r1, r1, r3
    1284:	e12fff1e 	bx	lr

00001288 <__aeabi_idiv0>:
    1288:	e12fff1e 	bx	lr

0000128c <atexit>:
    128c:	e1a01000 	mov	r1, r0
    1290:	e3a00000 	mov	r0, #0
    1294:	e92d4008 	push	{r3, lr}
    1298:	e1a02000 	mov	r2, r0
    129c:	e1a03000 	mov	r3, r0
    12a0:	eb00002c 	bl	1358 <__register_exitproc>
    12a4:	e8bd4008 	pop	{r3, lr}
    12a8:	e12fff1e 	bx	lr

000012ac <exit>:
    12ac:	e92d4008 	push	{r3, lr}
    12b0:	e3a01000 	mov	r1, #0
    12b4:	e1a04000 	mov	r4, r0
    12b8:	eb000063 	bl	144c <__call_exitprocs>
    12bc:	e59f3018 	ldr	r3, [pc, #24]	; 12dc <exit+0x30>
    12c0:	e5930000 	ldr	r0, [r3]
    12c4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    12c8:	e3530000 	cmp	r3, #0
    12cc:	11a0e00f 	movne	lr, pc
    12d0:	112fff13 	bxne	r3
    12d4:	e1a00004 	mov	r0, r4
    12d8:	eb0000e7 	bl	167c <_exit>
    12dc:	0000347c 	.word	0x0000347c

000012e0 <srand>:
    12e0:	e59f3010 	ldr	r3, [pc, #16]	; 12f8 <srand+0x18>
    12e4:	e5933000 	ldr	r3, [r3]
    12e8:	e3a02000 	mov	r2, #0
    12ec:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    12f0:	e58320ac 	str	r2, [r3, #172]	; 0xac
    12f4:	e12fff1e 	bx	lr
    12f8:	000034e8 	.word	0x000034e8

000012fc <rand>:
    12fc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1300:	e59f3044 	ldr	r3, [pc, #68]	; 134c <rand+0x50>
    1304:	e593c000 	ldr	r12, [r3]
    1308:	e59f4040 	ldr	r4, [pc, #64]	; 1350 <rand+0x54>
    130c:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    1310:	e0040492 	mul	r4, r2, r4
    1314:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    1318:	e59f3034 	ldr	r3, [pc, #52]	; 1354 <rand+0x58>
    131c:	e0244193 	mla	r4, r3, r1, r4
    1320:	e0810392 	umull	r0, r1, r2, r3
    1324:	e3a02001 	mov	r2, #1
    1328:	e0922000 	adds	r2, r2, r0
    132c:	e0841001 	add	r1, r4, r1
    1330:	e3a03000 	mov	r3, #0
    1334:	e0a33001 	adc	r3, r3, r1
    1338:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    133c:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1340:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1344:	e8bd0010 	ldmfd	sp!, {r4}
    1348:	e12fff1e 	bx	lr
    134c:	000034e8 	.word	0x000034e8
    1350:	5851f42d 	.word	0x5851f42d
    1354:	4c957f2d 	.word	0x4c957f2d

00001358 <__register_exitproc>:
    1358:	e59fc0e4 	ldr	r12, [pc, #228]	; 1444 <__register_exitproc+0xec>
    135c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1360:	e59c4000 	ldr	r4, [r12]
    1364:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1368:	e35c0000 	cmp	r12, #0
    136c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1370:	e59c5004 	ldr	r5, [r12, #4]
    1374:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1378:	e355001f 	cmp	r5, #31
    137c:	e24dd010 	sub	sp, sp, #16
    1380:	e1a06000 	mov	r6, r0
    1384:	da000015 	ble	13e0 <__register_exitproc+0x88>
    1388:	e59f00b8 	ldr	r0, [pc, #184]	; 1448 <__register_exitproc+0xf0>
    138c:	e3500000 	cmp	r0, #0
    1390:	1a000001 	bne	139c <__register_exitproc+0x44>
    1394:	e3e00000 	mvn	r0, #0
    1398:	ea000018 	b	1400 <__register_exitproc+0xa8>
    139c:	e3a00e19 	mov	r0, #400	; 0x190
    13a0:	e58d100c 	str	r1, [sp, #12]
    13a4:	e58d2008 	str	r2, [sp, #8]
    13a8:	e58d3004 	str	r3, [sp, #4]
    13ac:	e320f000 	nop	{0}
    13b0:	e250c000 	subs	r12, r0, #0
    13b4:	e59d100c 	ldr	r1, [sp, #12]
    13b8:	e59d2008 	ldr	r2, [sp, #8]
    13bc:	e59d3004 	ldr	r3, [sp, #4]
    13c0:	0afffff3 	beq	1394 <__register_exitproc+0x3c>
    13c4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    13c8:	e3a00000 	mov	r0, #0
    13cc:	e58c0004 	str	r0, [r12, #4]
    13d0:	e58c5000 	str	r5, [r12]
    13d4:	e584c148 	str	r12, [r4, #328]	; 0x148
    13d8:	e58c0188 	str	r0, [r12, #392]	; 0x188
    13dc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    13e0:	e3560000 	cmp	r6, #0
    13e4:	e59c4004 	ldr	r4, [r12, #4]
    13e8:	1a000007 	bne	140c <__register_exitproc+0xb4>
    13ec:	e2843002 	add	r3, r4, #2
    13f0:	e2844001 	add	r4, r4, #1
    13f4:	e78c1103 	str	r1, [r12, r3, lsl #2]
    13f8:	e58c4004 	str	r4, [r12, #4]
    13fc:	e3a00000 	mov	r0, #0
    1400:	e28dd010 	add	sp, sp, #16
    1404:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1408:	e12fff1e 	bx	lr
    140c:	e3a00001 	mov	r0, #1
    1410:	e1a00410 	lsl	r0, r0, r4
    1414:	e08c8104 	add	r8, r12, r4, lsl #2
    1418:	e3560002 	cmp	r6, #2
    141c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1420:	e5883108 	str	r3, [r8, #264]	; 0x108
    1424:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1428:	e1877000 	orr	r7, r7, r0
    142c:	01830000 	orreq	r0, r3, r0
    1430:	e1a05008 	mov	r5, r8
    1434:	e5882088 	str	r2, [r8, #136]	; 0x88
    1438:	e58c7188 	str	r7, [r12, #392]	; 0x188
    143c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1440:	eaffffe9 	b	13ec <__register_exitproc+0x94>
    1444:	0000347c 	.word	0x0000347c
    1448:	00000000 	.word	0x00000000

0000144c <__call_exitprocs>:
    144c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1450:	e59f3168 	ldr	r3, [pc, #360]	; 15c0 <__call_exitprocs+0x174>
    1454:	e5933000 	ldr	r3, [r3]
    1458:	e24dd014 	sub	sp, sp, #20
    145c:	e58d3004 	str	r3, [sp, #4]
    1460:	e2833f52 	add	r3, r3, #328	; 0x148
    1464:	e58d0008 	str	r0, [sp, #8]
    1468:	e58d300c 	str	r3, [sp, #12]
    146c:	e1a07001 	mov	r7, r1
    1470:	e3a08001 	mov	r8, #1
    1474:	e59d3004 	ldr	r3, [sp, #4]
    1478:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    147c:	e3560000 	cmp	r6, #0
    1480:	e59db00c 	ldr	r11, [sp, #12]
    1484:	0a000033 	beq	1558 <__call_exitprocs+0x10c>
    1488:	e5965004 	ldr	r5, [r6, #4]
    148c:	e2554001 	subs	r4, r5, #1
    1490:	5286a088 	addpl	r10, r6, #136	; 0x88
    1494:	5285501f 	addpl	r5, r5, #31
    1498:	508a5105 	addpl	r5, r10, r5, lsl #2
    149c:	5a000007 	bpl	14c0 <__call_exitprocs+0x74>
    14a0:	ea000029 	b	154c <__call_exitprocs+0x100>
    14a4:	e5953000 	ldr	r3, [r5]
    14a8:	e1530007 	cmp	r3, r7
    14ac:	0a000005 	beq	14c8 <__call_exitprocs+0x7c>
    14b0:	e2444001 	sub	r4, r4, #1
    14b4:	e3740001 	cmn	r4, #1
    14b8:	e2455004 	sub	r5, r5, #4
    14bc:	0a000022 	beq	154c <__call_exitprocs+0x100>
    14c0:	e3570000 	cmp	r7, #0
    14c4:	1afffff6 	bne	14a4 <__call_exitprocs+0x58>
    14c8:	e5963004 	ldr	r3, [r6, #4]
    14cc:	e06a2005 	rsb	r2, r10, r5
    14d0:	e2433001 	sub	r3, r3, #1
    14d4:	e0862002 	add	r2, r6, r2
    14d8:	e1530004 	cmp	r3, r4
    14dc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    14e0:	13a01000 	movne	r1, #0
    14e4:	05864004 	streq	r4, [r6, #4]
    14e8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    14ec:	e3530000 	cmp	r3, #0
    14f0:	0affffee 	beq	14b0 <__call_exitprocs+0x64>
    14f4:	e1a02418 	lsl	r2, r8, r4
    14f8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    14fc:	e1120001 	tst	r2, r1
    1500:	e5969004 	ldr	r9, [r6, #4]
    1504:	0a000016 	beq	1564 <__call_exitprocs+0x118>
    1508:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    150c:	e1120001 	tst	r2, r1
    1510:	1a000016 	bne	1570 <__call_exitprocs+0x124>
    1514:	e59d0008 	ldr	r0, [sp, #8]
    1518:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    151c:	e1a0e00f 	mov	lr, pc
    1520:	e12fff13 	bx	r3
    1524:	e5963004 	ldr	r3, [r6, #4]
    1528:	e1530009 	cmp	r3, r9
    152c:	1affffd0 	bne	1474 <__call_exitprocs+0x28>
    1530:	e59b3000 	ldr	r3, [r11]
    1534:	e1530006 	cmp	r3, r6
    1538:	1affffcd 	bne	1474 <__call_exitprocs+0x28>
    153c:	e2444001 	sub	r4, r4, #1
    1540:	e3740001 	cmn	r4, #1
    1544:	e2455004 	sub	r5, r5, #4
    1548:	1affffdc 	bne	14c0 <__call_exitprocs+0x74>
    154c:	e59f1070 	ldr	r1, [pc, #112]	; 15c4 <__call_exitprocs+0x178>
    1550:	e3510000 	cmp	r1, #0
    1554:	1a000009 	bne	1580 <__call_exitprocs+0x134>
    1558:	e28dd014 	add	sp, sp, #20
    155c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1560:	e12fff1e 	bx	lr
    1564:	e1a0e00f 	mov	lr, pc
    1568:	e12fff13 	bx	r3
    156c:	eaffffec 	b	1524 <__call_exitprocs+0xd8>
    1570:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1574:	e1a0e00f 	mov	lr, pc
    1578:	e12fff13 	bx	r3
    157c:	eaffffe8 	b	1524 <__call_exitprocs+0xd8>
    1580:	e5963004 	ldr	r3, [r6, #4]
    1584:	e3530000 	cmp	r3, #0
    1588:	e5963000 	ldr	r3, [r6]
    158c:	1a000008 	bne	15b4 <__call_exitprocs+0x168>
    1590:	e3530000 	cmp	r3, #0
    1594:	0a000006 	beq	15b4 <__call_exitprocs+0x168>
    1598:	e1a00006 	mov	r0, r6
    159c:	e58b3000 	str	r3, [r11]
    15a0:	e320f000 	nop	{0}
    15a4:	e59b6000 	ldr	r6, [r11]
    15a8:	e3560000 	cmp	r6, #0
    15ac:	1affffb5 	bne	1488 <__call_exitprocs+0x3c>
    15b0:	eaffffe8 	b	1558 <__call_exitprocs+0x10c>
    15b4:	e1a0b006 	mov	r11, r6
    15b8:	e1a06003 	mov	r6, r3
    15bc:	eafffff9 	b	15a8 <__call_exitprocs+0x15c>
    15c0:	0000347c 	.word	0x0000347c
    15c4:	00000000 	.word	0x00000000

000015c8 <register_fini>:
    15c8:	e92d4008 	push	{r3, lr}
    15cc:	e59f3010 	ldr	r3, [pc, #16]	; 15e4 <register_fini+0x1c>
    15d0:	e3530000 	cmp	r3, #0
    15d4:	159f000c 	ldrne	r0, [pc, #12]	; 15e8 <register_fini+0x20>
    15d8:	1bffff2b 	blne	128c <atexit>
    15dc:	e8bd4008 	pop	{r3, lr}
    15e0:	e12fff1e 	bx	lr
    15e4:	000034a4 	.word	0x000034a4
    15e8:	000015ec 	.word	0x000015ec

000015ec <__libc_fini_array>:
    15ec:	e92d4038 	push	{r3, r4, r5, lr}
    15f0:	e59f5030 	ldr	r5, [pc, #48]	; 1628 <__libc_fini_array+0x3c>
    15f4:	e59f4030 	ldr	r4, [pc, #48]	; 162c <__libc_fini_array+0x40>
    15f8:	e0654004 	rsb	r4, r5, r4
    15fc:	e1b04144 	asrs	r4, r4, #2
    1600:	10855104 	addne	r5, r5, r4, lsl #2
    1604:	0a000004 	beq	161c <__libc_fini_array+0x30>
    1608:	e5353004 	ldr	r3, [r5, #-4]!
    160c:	e1a0e00f 	mov	lr, pc
    1610:	e12fff13 	bx	r3
    1614:	e2544001 	subs	r4, r4, #1
    1618:	1afffffa 	bne	1608 <__libc_fini_array+0x1c>
    161c:	eb0007a0 	bl	34a4 <__libc_fini>
    1620:	e8bd4038 	pop	{r3, r4, r5, lr}
    1624:	e12fff1e 	bx	lr
    1628:	000034bc 	.word	0x000034bc
    162c:	000034c0 	.word	0x000034c0

00001630 <__cs3_premain>:
    1630:	e92d4008 	push	{r3, lr}
    1634:	eb00001d 	bl	16b0 <__libc_init_array>
    1638:	e59f3030 	ldr	r3, [pc, #48]	; 1670 <__cs3_premain+0x40>
    163c:	e3530000 	cmp	r3, #0
    1640:	15930000 	ldrne	r0, [r3]
    1644:	01a00003 	moveq	r0, r3
    1648:	e59f3024 	ldr	r3, [pc, #36]	; 1674 <__cs3_premain+0x44>
    164c:	e3530000 	cmp	r3, #0
    1650:	15931000 	ldrne	r1, [r3]
    1654:	01a01003 	moveq	r1, r3
    1658:	e3a02000 	mov	r2, #0
    165c:	ebfffe3b 	bl	f50 <main>
    1660:	e59f3010 	ldr	r3, [pc, #16]	; 1678 <__cs3_premain+0x48>
    1664:	e3530000 	cmp	r3, #0
    1668:	1bffff0f 	blne	12ac <exit>
    166c:	eafffffe 	b	166c <__cs3_premain+0x3c>
	...
    1678:	000012ac 	.word	0x000012ac

0000167c <_exit>:
    167c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1680:	e3a00018 	mov	r0, #24
    1684:	e59f1004 	ldr	r1, [pc, #4]	; 1690 <_exit+0x14>
    1688:	ef123456 	svc	0x00123456
    168c:	eafffffe 	b	168c <_exit+0x10>
    1690:	00020026 	.word	0x00020026

00001694 <__cs3_isr_interrupt>:
    1694:	eafffffe 	b	1694 <__cs3_isr_interrupt>

00001698 <__cs3_isr_undef>:
    1698:	eafffffe 	b	1698 <__cs3_isr_undef>

0000169c <__cs3_isr_swi>:
    169c:	eafffffe 	b	169c <__cs3_isr_swi>

000016a0 <__cs3_isr_pabort>:
    16a0:	eafffffe 	b	16a0 <__cs3_isr_pabort>

000016a4 <__cs3_isr_dabort>:
    16a4:	eafffffe 	b	16a4 <__cs3_isr_dabort>

000016a8 <__cs3_isr_irq>:
    16a8:	eafffffe 	b	16a8 <__cs3_isr_irq>

000016ac <__cs3_isr_fiq>:
    16ac:	eafffffe 	b	16ac <__cs3_isr_fiq>

000016b0 <__libc_init_array>:
    16b0:	e92d4070 	push	{r4, r5, r6, lr}
    16b4:	e59f506c 	ldr	r5, [pc, #108]	; 1728 <__libc_init_array+0x78>
    16b8:	e59f606c 	ldr	r6, [pc, #108]	; 172c <__libc_init_array+0x7c>
    16bc:	e0656006 	rsb	r6, r5, r6
    16c0:	e1b06146 	asrs	r6, r6, #2
    16c4:	12455004 	subne	r5, r5, #4
    16c8:	13a04000 	movne	r4, #0
    16cc:	0a000005 	beq	16e8 <__libc_init_array+0x38>
    16d0:	e5b53004 	ldr	r3, [r5, #4]!
    16d4:	e2844001 	add	r4, r4, #1
    16d8:	e1a0e00f 	mov	lr, pc
    16dc:	e12fff13 	bx	r3
    16e0:	e1560004 	cmp	r6, r4
    16e4:	1afffff9 	bne	16d0 <__libc_init_array+0x20>
    16e8:	e59f5040 	ldr	r5, [pc, #64]	; 1730 <__libc_init_array+0x80>
    16ec:	e59f6040 	ldr	r6, [pc, #64]	; 1734 <__libc_init_array+0x84>
    16f0:	e0656006 	rsb	r6, r5, r6
    16f4:	eb000762 	bl	3484 <_init>
    16f8:	e1b06146 	asrs	r6, r6, #2
    16fc:	12455004 	subne	r5, r5, #4
    1700:	13a04000 	movne	r4, #0
    1704:	0a000005 	beq	1720 <__libc_init_array+0x70>
    1708:	e5b53004 	ldr	r3, [r5, #4]!
    170c:	e2844001 	add	r4, r4, #1
    1710:	e1a0e00f 	mov	lr, pc
    1714:	e12fff13 	bx	r3
    1718:	e1560004 	cmp	r6, r4
    171c:	1afffff9 	bne	1708 <__libc_init_array+0x58>
    1720:	e8bd4070 	pop	{r4, r5, r6, lr}
    1724:	e12fff1e 	bx	lr
    1728:	0000349c 	.word	0x0000349c
    172c:	0000349c 	.word	0x0000349c
    1730:	0000349c 	.word	0x0000349c
    1734:	000034a4 	.word	0x000034a4

Disassembly of section .rodata:

0000173c <bird_data-0x14>:
    173c:	726f6353 	.word	0x726f6353
    1740:	00203a65 	.word	0x00203a65
	...

00001750 <bird_data>:
	...
    177c:	ff000000 ff000000 ff000000 00000000     ................
	...
    17d0:	ff000000 ff000000 ff000000 ff000000     ................
	...
    1824:	ff000000 ff000000 ff000000 ff000000     ................
	...
    187c:	ff000000 ff000000 ff000000 ff000000     ................
	...
    18d0:	ff000000 ff000000 ff000000 ff000000     ................
	...
    1924:	ff000000 ff000000 ff000000 ff000000     ................
    1934:	ff000000 00000000 00000000 00000000     ................
	...
    1978:	ff000000 ff000000 ff000000 ff000000     ................
    1988:	ff000000 00000000 00000000 00000000     ................
	...
    19ac:	ff000000 ff000000 ff000000 00000000     ................
	...
    19cc:	ff000000 ff000000 ff000000 ff000000     ................
    19dc:	ff000000 ff000000 00000000 00000000     ................
	...
    19fc:	ff000000 ff000000 00000000 ff000000     ................
    1a0c:	ff000000 ff000000 00000000 00000000     ................
    1a1c:	00000000 ff000000 ff000000 ff000000     ................
    1a2c:	ff000000 ff000000 ff000000 00000000     ................
	...
    1a4c:	ff000000 ff000000 ff000000 ff000000     ................
    1a5c:	ff000000 ff000000 ff000000 ff000000     ................
    1a6c:	ff000000 ff000000 ff000000 ff000000     ................
    1a7c:	ff000000 ff000000 ff000000 ff000000     ................
    1a8c:	ff000000 ff000000 ff000000 ff000000     ................
    1a9c:	ff000000 ff000000 ff000000 ff000000     ................
    1aac:	ff000000 ff000000 ff000000 ff000000     ................
    1abc:	ff000000 ff000000 ff000000 ff000000     ................
    1acc:	ff000000 ff000000 ff000000 ff000000     ................
    1adc:	ff000000 ff000000 00000000 00000000     ................
	...
    1b04:	ff000000 ff000000 ff000000 ff000000     ................
    1b14:	ff000000 ff000000 ff000000 ff000000     ................
    1b24:	ff000000 ff000000 ff000000 ff000000     ................
    1b34:	ff000000 00000000 00000000 00000000     ................
	...
    1b60:	ff000000 ff000000 ff000000 ff000000     ................
    1b70:	ff000000 ff000000 ff000000 ff000000     ................
    1b80:	ff000000 ff000000 ff000000 ff000000     ................
    1b90:	ff000000 00000000 00000000 00000000     ................
	...
    1bbc:	ff000000 ff000000 ff000000 ff000000     ................
    1bcc:	ff000000 ff000000 ff000000 ff000000     ................
	...

00001be8 <cactus_sprite_data>:
	...
    1c08:	00000001 00000001 00000001 00000000     ................
	...
    1c4c:	00000001 00000001 00000001 00000001     ................
    1c5c:	00000001 00000000 00000000 00000000     ................
	...
    1c90:	00000001 00000001 00000001 00000001     ................
    1ca0:	00000001 00000001 00000001 00000000     ................
	...
    1cd8:	00000001 00000001 00000001 00000001     ................
    1ce8:	00000001 00000001 00000001 00000000     ................
    1cf8:	00000000 00000001 00000001 00000001     ................
	...
    1d20:	00000001 00000001 00000001 00000001     ................
    1d30:	00000001 00000001 00000001 00000000     ................
    1d40:	00000000 00000001 00000001 00000001     ................
	...
    1d68:	00000001 00000001 00000001 00000001     ................
    1d78:	00000001 00000001 00000001 00000000     ................
    1d88:	00000000 00000001 00000001 00000001     ................
	...
    1db0:	00000001 00000001 00000001 00000001     ................
    1dc0:	00000001 00000001 00000001 00000000     ................
    1dd0:	00000000 00000001 00000001 00000001     ................
	...
    1df8:	00000001 00000001 00000001 00000001     ................
    1e08:	00000001 00000001 00000001 00000000     ................
    1e18:	00000000 00000001 00000001 00000001     ................
	...
    1e40:	00000001 00000001 00000001 00000001     ................
    1e50:	00000001 00000001 00000001 00000000     ................
    1e60:	00000000 00000001 00000001 00000001     ................
    1e70:	00000000 00000001 00000001 00000001     ................
	...
    1e88:	00000001 00000001 00000001 00000001     ................
    1e98:	00000001 00000001 00000001 00000000     ................
    1ea8:	00000000 00000001 00000001 00000001     ................
    1eb8:	00000000 00000001 00000001 00000001     ................
	...
    1ed0:	00000001 00000001 00000001 00000001     ................
    1ee0:	00000001 00000001 00000001 00000001     ................
    1ef0:	00000001 00000001 00000001 00000001     ................
    1f00:	00000000 00000001 00000001 00000001     ................
	...
    1f18:	00000001 00000001 00000001 00000001     ................
    1f28:	00000001 00000001 00000001 00000001     ................
    1f38:	00000001 00000001 00000001 00000001     ................
    1f48:	00000000 00000001 00000001 00000001     ................
	...
    1f60:	00000001 00000001 00000001 00000001     ................
    1f70:	00000001 00000001 00000001 00000001     ................
    1f80:	00000001 00000001 00000001 00000001     ................
    1f90:	00000000 00000001 00000001 00000001     ................
	...
    1fa8:	00000001 00000001 00000001 00000001     ................
    1fb8:	00000001 00000001 00000001 00000001     ................
    1fc8:	00000001 00000001 00000001 00000001     ................
    1fd8:	00000000 00000001 00000001 00000001     ................
	...
    1ff0:	00000001 00000001 00000001 00000001     ................
    2000:	00000001 00000001 00000001 00000000     ................
	...
    2024:	00000001 00000001 00000001 00000000     ................
    2034:	00000000 00000001 00000001 00000001     ................
    2044:	00000001 00000001 00000001 00000001     ................
	...
    206c:	00000001 00000001 00000001 00000000     ................
    207c:	00000000 00000001 00000001 00000001     ................
    208c:	00000001 00000001 00000001 00000001     ................
	...
    20b4:	00000001 00000001 00000001 00000001     ................
    20c4:	00000001 00000001 00000001 00000001     ................
    20d4:	00000001 00000001 00000001 00000001     ................
	...
    20fc:	00000001 00000001 00000001 00000001     ................
    210c:	00000001 00000001 00000001 00000001     ................
    211c:	00000001 00000001 00000001 00000001     ................
	...
    2144:	00000001 00000001 00000001 00000001     ................
    2154:	00000001 00000001 00000001 00000001     ................
    2164:	00000001 00000001 00000001 00000001     ................
	...
    21a0:	00000001 00000001 00000001 00000001     ................
    21b0:	00000001 00000001 00000001 00000000     ................
	...
    21e8:	00000001 00000001 00000001 00000001     ................
    21f8:	00000001 00000001 00000001 00000000     ................
	...
    2230:	00000001 00000001 00000001 00000001     ................
    2240:	00000001 00000001 00000001 00000000     ................
	...
    2278:	00000001 00000001 00000001 00000001     ................
    2288:	00000001 00000001 00000001 00000000     ................
	...
    22c0:	00000001 00000001 00000001 00000001     ................
    22d0:	00000001 00000001 00000001 00000000     ................
	...
    2308:	00000001 00000001 00000001 00000001     ................
    2318:	00000001 00000001 00000001 00000000     ................
	...
    2350:	00000001 00000001 00000001 00000001     ................
    2360:	00000001 00000001 00000001 00000000     ................
	...
    2398:	00000001 00000001 00000001 00000001     ................
    23a8:	00000001 00000001 00000001 00000000     ................
	...

000023c8 <dino_sprite_data_left>:
	...
    23dc:	00000001 00000001 00000001 00000001     ................
    23ec:	00000001 00000001 00000001 00000001     ................
    23fc:	00000001 00000001 00000001 00000001     ................
    240c:	00000001 00000001 00000001 00000000     ................
	...
    242c:	00000001 00000001 00000001 00000001     ................
    243c:	00000001 00000001 00000001 00000001     ................
    244c:	00000001 00000001 00000001 00000001     ................
    245c:	00000001 00000001 00000001 00000000     ................
	...
    247c:	00000001 00000001 00000000 00000000     ................
    248c:	00000001 00000001 00000001 00000001     ................
    249c:	00000001 00000001 00000001 00000001     ................
    24ac:	00000001 00000001 00000001 00000000     ................
	...
    24cc:	00000001 00000001 00000000 00000000     ................
    24dc:	00000001 00000001 00000001 00000001     ................
    24ec:	00000001 00000001 00000001 00000001     ................
    24fc:	00000001 00000001 00000001 00000000     ................
	...
    251c:	00000001 00000001 00000001 00000001     ................
    252c:	00000001 00000001 00000001 00000001     ................
    253c:	00000001 00000001 00000001 00000001     ................
    254c:	00000001 00000001 00000001 00000000     ................
	...
    256c:	00000001 00000001 00000001 00000001     ................
    257c:	00000001 00000001 00000001 00000001     ................
    258c:	00000001 00000001 00000001 00000001     ................
    259c:	00000001 00000001 00000000 00000000     ................
	...
    25bc:	00000001 00000001 00000001 00000001     ................
    25cc:	00000001 00000001 00000001 00000001     ................
    25dc:	00000001 00000001 00000001 00000001     ................
    25ec:	00000001 00000000 00000000 00000000     ................
	...
    260c:	00000001 00000001 00000001 00000001     ................
    261c:	00000001 00000001 00000000 00000000     ................
	...
    265c:	00000001 00000001 00000001 00000001     ................
    266c:	00000001 00000001 00000000 00000000     ................
	...
    26ac:	00000001 00000001 00000001 00000001     ................
    26bc:	00000001 00000001 00000001 00000001     ................
    26cc:	00000001 00000001 00000001 00000001     ................
    26dc:	00000001 00000000 00000000 00000000     ................
	...
    26fc:	00000001 00000001 00000001 00000001     ................
    270c:	00000001 00000001 00000001 00000001     ................
    271c:	00000001 00000001 00000001 00000001     ................
    272c:	00000001 00000000 00000000 00000000     ................
	...
    274c:	00000001 00000001 00000001 00000001     ................
    275c:	00000001 00000001 00000001 00000001     ................
    276c:	00000001 00000001 00000001 00000001     ................
    277c:	00000001 00000000 00000000 00000001     ................
    278c:	00000001 00000000 00000000 00000000     ................
    279c:	00000001 00000001 00000001 00000001     ................
    27ac:	00000001 00000001 00000001 00000001     ................
    27bc:	00000001 00000000 00000000 00000000     ................
	...
    27d8:	00000001 00000001 00000000 00000000     ................
    27e8:	00000000 00000001 00000001 00000001     ................
    27f8:	00000001 00000001 00000001 00000001     ................
    2808:	00000001 00000001 00000000 00000000     ................
	...
    2828:	00000001 00000001 00000000 00000000     ................
    2838:	00000000 00000001 00000001 00000001     ................
    2848:	00000001 00000001 00000001 00000001     ................
    2858:	00000001 00000001 00000000 00000000     ................
	...
    2878:	00000001 00000001 00000000 00000000     ................
    2888:	00000000 00000001 00000001 00000001     ................
    2898:	00000001 00000001 00000001 00000001     ................
    28a8:	00000001 00000001 00000001 00000001     ................
    28b8:	00000001 00000001 00000001 00000000     ................
    28c8:	00000001 00000001 00000001 00000001     ................
    28d8:	00000000 00000001 00000001 00000001     ................
    28e8:	00000001 00000001 00000001 00000001     ................
    28f8:	00000001 00000001 00000001 00000001     ................
    2908:	00000001 00000001 00000001 00000000     ................
    2918:	00000001 00000001 00000001 00000001     ................
    2928:	00000000 00000001 00000001 00000001     ................
    2938:	00000001 00000001 00000001 00000001     ................
    2948:	00000001 00000001 00000000 00000000     ................
    2958:	00000000 00000001 00000001 00000000     ................
    2968:	00000001 00000001 00000001 00000001     ................
    2978:	00000001 00000001 00000001 00000001     ................
    2988:	00000001 00000001 00000001 00000001     ................
    2998:	00000001 00000001 00000000 00000000     ................
    29a8:	00000000 00000001 00000001 00000000     ................
    29b8:	00000001 00000001 00000001 00000001     ................
    29c8:	00000001 00000001 00000001 00000001     ................
    29d8:	00000001 00000001 00000001 00000001     ................
    29e8:	00000001 00000001 00000000 00000000     ................
	...
    2a08:	00000001 00000001 00000001 00000001     ................
    2a18:	00000001 00000001 00000001 00000001     ................
    2a28:	00000001 00000001 00000001 00000001     ................
    2a38:	00000001 00000001 00000000 00000000     ................
	...
    2a68:	00000001 00000001 00000001 00000001     ................
    2a78:	00000001 00000000 00000000 00000001     ................
    2a88:	00000001 00000001 00000000 00000000     ................
	...
    2ab8:	00000001 00000001 00000001 00000001     ................
	...
    2ad4:	00000001 00000001 00000000 00000000     ................
	...
    2b08:	00000001 00000001 00000001 00000000     ................
	...
    2b24:	00000001 00000001 00000001 00000001     ................
    2b34:	00000001 00000001 00000000 00000000     ................
	...
    2b58:	00000001 00000001 00000000 00000000     ................
	...
    2b74:	00000001 00000001 00000001 00000001     ................
    2b84:	00000001 00000001 00000000 00000000     ................
	...
    2ba8:	00000001 00000001 00000001 00000001     ................
    2bb8:	00000001 00000001 00000000 00000000     ................
	...

00002be8 <dino_sprite_data_right>:
	...
    2bfc:	00000001 00000001 00000001 00000001     ................
    2c0c:	00000001 00000001 00000001 00000001     ................
    2c1c:	00000001 00000001 00000001 00000001     ................
    2c2c:	00000001 00000001 00000001 00000000     ................
	...
    2c4c:	00000001 00000001 00000001 00000001     ................
    2c5c:	00000001 00000001 00000001 00000001     ................
    2c6c:	00000001 00000001 00000001 00000001     ................
    2c7c:	00000001 00000001 00000001 00000000     ................
	...
    2c9c:	00000001 00000001 00000000 00000000     ................
    2cac:	00000001 00000001 00000001 00000001     ................
    2cbc:	00000001 00000001 00000001 00000001     ................
    2ccc:	00000001 00000001 00000001 00000000     ................
	...
    2cec:	00000001 00000001 00000000 00000000     ................
    2cfc:	00000001 00000001 00000001 00000001     ................
    2d0c:	00000001 00000001 00000001 00000001     ................
    2d1c:	00000001 00000001 00000001 00000000     ................
	...
    2d3c:	00000001 00000001 00000001 00000001     ................
    2d4c:	00000001 00000001 00000001 00000001     ................
    2d5c:	00000001 00000001 00000001 00000001     ................
    2d6c:	00000001 00000001 00000001 00000000     ................
	...
    2d8c:	00000001 00000001 00000001 00000001     ................
    2d9c:	00000001 00000001 00000001 00000001     ................
    2dac:	00000001 00000001 00000001 00000001     ................
    2dbc:	00000001 00000001 00000000 00000000     ................
	...
    2ddc:	00000001 00000001 00000001 00000001     ................
    2dec:	00000001 00000001 00000001 00000001     ................
    2dfc:	00000001 00000001 00000001 00000001     ................
    2e0c:	00000001 00000000 00000000 00000000     ................
	...
    2e2c:	00000001 00000001 00000001 00000001     ................
    2e3c:	00000001 00000001 00000000 00000000     ................
	...
    2e7c:	00000001 00000001 00000001 00000001     ................
    2e8c:	00000001 00000001 00000000 00000000     ................
	...
    2ecc:	00000001 00000001 00000001 00000001     ................
    2edc:	00000001 00000001 00000001 00000001     ................
    2eec:	00000001 00000001 00000001 00000001     ................
    2efc:	00000001 00000000 00000000 00000000     ................
	...
    2f1c:	00000001 00000001 00000001 00000001     ................
    2f2c:	00000001 00000001 00000001 00000001     ................
    2f3c:	00000001 00000001 00000001 00000001     ................
    2f4c:	00000001 00000000 00000000 00000000     ................
	...
    2f6c:	00000001 00000001 00000001 00000001     ................
    2f7c:	00000001 00000001 00000001 00000001     ................
    2f8c:	00000001 00000001 00000001 00000001     ................
    2f9c:	00000001 00000000 00000000 00000001     ................
    2fac:	00000001 00000000 00000000 00000000     ................
    2fbc:	00000001 00000001 00000001 00000001     ................
    2fcc:	00000001 00000001 00000001 00000001     ................
    2fdc:	00000001 00000000 00000000 00000000     ................
	...
    2ff8:	00000001 00000001 00000000 00000000     ................
    3008:	00000000 00000001 00000001 00000001     ................
    3018:	00000001 00000001 00000001 00000001     ................
    3028:	00000001 00000001 00000000 00000000     ................
	...
    3048:	00000001 00000001 00000000 00000000     ................
    3058:	00000000 00000001 00000001 00000001     ................
    3068:	00000001 00000001 00000001 00000001     ................
    3078:	00000001 00000001 00000000 00000000     ................
	...
    3098:	00000001 00000001 00000000 00000000     ................
    30a8:	00000000 00000001 00000001 00000001     ................
    30b8:	00000001 00000001 00000001 00000001     ................
    30c8:	00000001 00000001 00000001 00000001     ................
    30d8:	00000001 00000001 00000001 00000000     ................
    30e8:	00000001 00000001 00000001 00000001     ................
    30f8:	00000000 00000001 00000001 00000001     ................
    3108:	00000001 00000001 00000001 00000001     ................
    3118:	00000001 00000001 00000001 00000001     ................
    3128:	00000001 00000001 00000001 00000000     ................
    3138:	00000001 00000001 00000001 00000001     ................
    3148:	00000000 00000001 00000001 00000001     ................
    3158:	00000001 00000001 00000001 00000001     ................
    3168:	00000001 00000001 00000000 00000000     ................
    3178:	00000000 00000001 00000001 00000000     ................
    3188:	00000001 00000001 00000001 00000001     ................
    3198:	00000001 00000001 00000001 00000001     ................
    31a8:	00000001 00000001 00000001 00000001     ................
    31b8:	00000001 00000001 00000000 00000000     ................
    31c8:	00000000 00000001 00000001 00000000     ................
    31d8:	00000001 00000001 00000001 00000001     ................
    31e8:	00000001 00000001 00000001 00000001     ................
    31f8:	00000001 00000001 00000001 00000001     ................
    3208:	00000001 00000001 00000000 00000000     ................
	...
    3228:	00000001 00000001 00000001 00000001     ................
    3238:	00000001 00000001 00000001 00000001     ................
    3248:	00000001 00000001 00000001 00000001     ................
    3258:	00000001 00000001 00000000 00000000     ................
	...
    3288:	00000001 00000001 00000001 00000000     ................
	...
    32a0:	00000001 00000001 00000001 00000001     ................
	...
    32d8:	00000001 00000001 00000000 00000000     ................
	...
    32f0:	00000001 00000001 00000001 00000000     ................
	...
    3328:	00000001 00000001 00000001 00000001     ................
    3338:	00000001 00000000 00000001 00000001     ................
    3348:	00000001 00000000 00000000 00000000     ................
	...
    3378:	00000001 00000001 00000001 00000001     ................
    3388:	00000001 00000000 00000001 00000001     ................
	...
    33e0:	00000001 00000001 00000001 00000001     ................
    33f0:	00000001 00000001 00000000 00000000     ................
	...
    3408:	454d4147 45564f20 00002152 73657250     GAME OVER!..Pres
    3418:	454b2073 74203159 6572206f 72617473     s KEY1 to restar
    3428:	00000074 6f726843 4420656d 206f6e69     t...Chrome Dino 
    3438:	656d6147 00000000 73657250 454b2073     Game....Press KE
    3448:	74203059 756a206f 0000706d 6b637544     Y0 to jump..Duck
    3458:	646e7520 62207265 73647269 00000021      under birds!...
    3468:	73657250 454b2073 74203159 7473206f     Press KEY1 to st
    3478:	00747261                                art.

0000347c <_global_impure_ptr>:
    347c:	000034f0 00000043                       .4..C...

00003484 <_init>:
    3484:	e1a0c00d 	mov	r12, sp
    3488:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    348c:	e24cb004 	sub	r11, r12, #4
    3490:	e24bd028 	sub	sp, r11, #40	; 0x28
    3494:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    3498:	e12fff1e 	bx	lr

0000349c <__init_array_start>:
    349c:	000015c8 	.word	0x000015c8

000034a0 <__frame_dummy_init_array_entry>:
    34a0:	00000208                                ....

000034a4 <__libc_fini>:
    34a4:	e1a0c00d 	mov	r12, sp
    34a8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    34ac:	e24cb004 	sub	r11, r12, #4
    34b0:	e24bd028 	sub	sp, r11, #40	; 0x28
    34b4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    34b8:	e12fff1e 	bx	lr

000034bc <__fini_array_start>:
    34bc:	000001c4 	.word	0x000001c4

000034c0 <__cs3_regions>:
	...
    34cc:	00003920 	.word	0x00003920
    34d0:	00000098 	.word	0x00000098

000034d4 <__cs3_regions_end>:
    34d4:	00000000 	.word	0x00000000
